import React, {useState} from "react";
import Head from "next/head";
import { createClient } from 'next-sanity'
import { Paper, Box, FormControl, InputLabel, MenuItem, Select } from '@mui/material';

import Layout from "../components/layout";
import Header from "../components/header";
import Footer from "../components/footer.js";
import styles from "../styles/localResources.module.css";


const client = createClient({
  projectId: 'hiagtp2f',
  dataset: 'production',
  apiVersion: '2024-01-22',
  useCdn: false,
});

export default function LocalResources({ footerContent, localResources, navbarItem }) {

    const [lang, setLang] = useState('en');


  const handleChange = (event) => {
        setLang(event.target.value);
        if (typeof window !== "undefined") {
            localStorage.setItem("langChoice", event.target.value);
            console.log("Set local language to: " + event.target.value);
        }
  };
  
  const checkLang = () => {
    if (typeof window !== "undefined") {
      var languageSelection = localStorage.getItem('langChoice') || 'en';
      if(languageSelection != lang)
        setLang(languageSelection);
      console.log("Stored language is " + languageSelection);
    }
  }

  checkLang();

 const navbarItemTitles = navbarItem.filter((item) => item.language === lang).length > 0 ? navbarItem.filter((item) => item.language === lang).map((item) => item.title) : navbarItem.filter((item) => item.language === "en").map((item) => item.title)

    const navbarItemLinks = navbarItem.filter((item) => item.language === lang).length > 0 ? navbarItem.filter((item) => item.language === lang).map((item) => item.link) : navbarItem.filter((item) => item.language === "en").map((item) => item.link)
    
      const footerContentL = footerContent.filter((footerContent) => footerContent.language == lang).length > 0 ? footerContent.filter((footerContent) => footerContent.language == lang) : footerContent.filter((footerContent) => footerContent.language == 'en');


    // const states = localResources.map((state) => state.state);
    // add all unique states to an array
    const states = [...new Set(localResources.map((state) => state.state))];
    console.log(states);



    

    return (
        <>
            <Head>
                <title>ABA: Discussion</title>
                <meta name="description" content="Generated by create next app" />
                <link rel="icon" href="/favicon.ico" />
                <link rel="stylesheet" href="https://use.typekit.net/hco7ora.css" />

            </Head>
            <Header titles={navbarItemTitles} links={navbarItemLinks} />
            <div style={{
        position: 'fixed',
        right: '0',
        zIndex: '100',
        marginTop: '2rem',
        marginRight: '1.5rem',
      }}>
                <Box sx={{ width: 100 }}>
                    <FormControl fullWidth>
                        <InputLabel id="demo-simple-select-label" style={{color: 'rgb(86, 129, 39)'}} > 
                            {lang}
                        </InputLabel>
                        <Select
                            labelId="demo-simple-select-label"
                            id="demo-simple-select"
                            value={lang}
                            label="Language"
                            onChange={handleChange}
                            style={{color: 'rgb(86, 129, 39)'}}
                        >
                              <MenuItem value={'en'}>English</MenuItem>
                            <MenuItem value={'zh-tw'}>繁體中文</MenuItem>
                            <MenuItem value={'zh-cn'}>粵語</MenuItem>
                            <MenuItem value={'zh'}>簡體中文</MenuItem>
                            <MenuItem value={'ko'}>한국어</MenuItem>
                            <MenuItem value={'vi'}>Tiếng Việt</MenuItem>
                            <MenuItem value={'ja'}>日本語</MenuItem>
                             
                              


                        </Select>
                    </FormControl>
                </Box>
            </div>
            <Layout title='ABA: Discussion' description=' '>
                <div id='body'>
                    <div style={{ display: 'flex', justifyContent: 'center', alignItems: 'center', flexDirection: 'column', marginTop: '50px' }}>
                            {/* Map each state, and list all links with that state */}
                            {states.map((state) => (
                                <Paper
                                    key={state}
                                    style={{ width: '90vw', maxWidth: '60rem', paddingLeft: '1rem', paddingTop: '1rem', marginBottom: '2rem', borderRadius: '25px' }}>

                                <div>
                                    <h2 style={{margin: 0}}>{state}</h2>
                                    {localResources.map((resource) => (
                                        <div key={resource.name}>
                                            {resource.state === state ? (
                                                <div style={{paddingBottom: '2rem'}}>
                                                    <p style={{margin: 0}}>{resource.city}</p>
                                                    <h3 style={{margin: 0}}>{resource.name}</h3>
                                                    <a className={styles.localResourceLink} href={resource.link} target="_blank" >{resource.link}</a>
                                                </div>
                                            ) : null}
                                        </div>
                                    ))}
                                    </div>
                                                            </Paper>

                            ))}

                            

                        </div>


                </div>
            </Layout>

            <Footer 
            link={
          footerContentL[0]?.link
        } body={
          footerContentL[0]?.body
        } />
        </>
    )
}


export async function getStaticProps() {
    const footerContent = await client.fetch(`*[_type == "footerContent"]  | order(order asc)`)
    const localResources = await client.fetch(`*[_type == "localResource"]`)
    const navbarItem = await client.fetch(`*[_type == "navbarItem"]  | order(order asc)`)

    return {
        props: {
            footerContent,
            localResources,
            navbarItem,
        },
    };
}

