'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _toConsumableArray = require('@babel/runtime/helpers/toConsumableArray');
var defaultResolve = require('part:@sanity/base/document-badges');
var config = require('config:@sanity/document-internationalization');
var schemas = require('part:@sanity/base/schema');
require('part:@sanity/base/client');
require('@babel/runtime/helpers/asyncToGenerator');
require('@babel/runtime/regenerator');
require('part:@sanity/document-internationalization/languages/loader?');
require('@babel/runtime/helpers/defineProperty');
require('lodash');
require('@sanity/types');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var _toConsumableArray__default = /*#__PURE__*/_interopDefaultLegacy(_toConsumableArray);
var defaultResolve__default = /*#__PURE__*/_interopDefaultLegacy(defaultResolve);
var config__default = /*#__PURE__*/_interopDefaultLegacy(config);
var schemas__default = /*#__PURE__*/_interopDefaultLegacy(schemas);

var ReferenceBehavior;

(function (ReferenceBehavior) {
  ReferenceBehavior["STRONG"] = "strong";
  ReferenceBehavior["WEAK"] = "weak";
  ReferenceBehavior["DISABLED"] = "disabled";
})(ReferenceBehavior || (ReferenceBehavior = {}));

var IdStructure;

(function (IdStructure) {
  IdStructure["SUBPATH"] = "subpath";
  IdStructure["DELIMITER"] = "delimiter";
})(IdStructure || (IdStructure = {}));

var getSchema = function getSchema(name) {
  return schemas__default["default"]._original.types.find(function (s) {
    return s.name === name;
  });
};

var getI18nConfigFromType = function getI18nConfigFromType(type) {
  var i18nconfig = {};

  if (type) {
    if (typeof type === 'string') {
      var schema = getSchema(type);

      if (schema && typeof schema.i18n !== 'boolean') {
        i18nconfig = schema.i18n;
      }
    } else if (typeof type.i18n !== 'boolean') {
      i18nconfig = type.i18n;
    }
  }

  return i18nconfig;
};

function getConfig(type) {
  var _schemaConfig$fieldNa, _cfg$fieldNames, _schemaConfig$fieldNa2, _cfg$fieldNames2, _schemaConfig$fieldNa3, _cfg$fieldNames3;

  var schemaConfig = getI18nConfigFromType(type);
  var cfg = config__default["default"];
  return {
    base: (schemaConfig === null || schemaConfig === void 0 ? void 0 : schemaConfig.base) || (cfg === null || cfg === void 0 ? void 0 : cfg.base) || '',
    idStructure: cfg.idStructure || IdStructure.DELIMITER,
    referenceBehavior: cfg.referenceBehavior || ReferenceBehavior.STRONG,
    withTranslationsMaintenance: (cfg === null || cfg === void 0 ? void 0 : cfg.withTranslationsMaintenance) === true,
    fieldNames: {
      lang: (schemaConfig === null || schemaConfig === void 0 ? void 0 : (_schemaConfig$fieldNa = schemaConfig.fieldNames) === null || _schemaConfig$fieldNa === void 0 ? void 0 : _schemaConfig$fieldNa.lang) || (cfg === null || cfg === void 0 ? void 0 : (_cfg$fieldNames = cfg.fieldNames) === null || _cfg$fieldNames === void 0 ? void 0 : _cfg$fieldNames.lang) || '__i18n_lang',
      references: (schemaConfig === null || schemaConfig === void 0 ? void 0 : (_schemaConfig$fieldNa2 = schemaConfig.fieldNames) === null || _schemaConfig$fieldNa2 === void 0 ? void 0 : _schemaConfig$fieldNa2.references) || (cfg === null || cfg === void 0 ? void 0 : (_cfg$fieldNames2 = cfg.fieldNames) === null || _cfg$fieldNames2 === void 0 ? void 0 : _cfg$fieldNames2.references) || '__i18n_refs',
      baseReference: (schemaConfig === null || schemaConfig === void 0 ? void 0 : (_schemaConfig$fieldNa3 = schemaConfig.fieldNames) === null || _schemaConfig$fieldNa3 === void 0 ? void 0 : _schemaConfig$fieldNa3.baseReference) || (cfg === null || cfg === void 0 ? void 0 : (_cfg$fieldNames3 = cfg.fieldNames) === null || _cfg$fieldNames3 === void 0 ? void 0 : _cfg$fieldNames3.baseReference) || '__i18n_base'
    },
    languages: (schemaConfig === null || schemaConfig === void 0 ? void 0 : schemaConfig.languages) || (cfg === null || cfg === void 0 ? void 0 : cfg.languages) || []
  };
}

function getLanguageFromDocument(doc, config) {
  return (doc === null || doc === void 0 ? void 0 : doc[config.fieldNames.lang]) || config.base || null;
}

var LanguageBadge = function LanguageBadge(props) {
  var config = getConfig(props.type);
  var doc = props.draft || props.published;
  var lang = doc ? getLanguageFromDocument(doc, config) : null;

  if (lang) {
    return {
      label: lang,
      color: 'success'
    };
  }

  return null;
};

var resolver = function resolver(props) {
  return [].concat(_toConsumableArray__default["default"](defaultResolve__default["default"](props)), [LanguageBadge]);
};

exports.LanguageBadge = LanguageBadge;
exports["default"] = resolver;
//# sourceMappingURL=index.js.map
