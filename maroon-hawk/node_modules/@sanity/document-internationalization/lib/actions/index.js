'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var defaultResolve = require('part:@sanity/base/document-actions');
var config = require('config:@sanity/document-internationalization');
var schemas = require('part:@sanity/base/schema');
var client = require('part:@sanity/base/client');
var _asyncToGenerator = require('@babel/runtime/helpers/asyncToGenerator');
var _regeneratorRuntime = require('@babel/runtime/regenerator');
var languagesLoaderFn = require('part:@sanity/document-internationalization/languages/loader?');
var _defineProperty = require('@babel/runtime/helpers/defineProperty');
var _ = require('lodash');
require('@sanity/types');
var _slicedToArray = require('@babel/runtime/helpers/slicedToArray');
var React = require('react');
var reactHooks = require('@sanity/react-hooks');
var ui = require('@sanity/ui');
var icons = require('@sanity/icons');
var TrashIcon = require('part:@sanity/base/trash-icon');
var ConfirmDeleteDialog = require('@sanity/desk-tool/lib/components/confirmDeleteDialog/ConfirmDeleteDialog');
var ContentCopyIcon = require('part:@sanity/base/content-copy-icon');
var uuid = require('@sanity/uuid');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

function _interopNamespace(e) {
	if (e && e.__esModule) return e;
	var n = Object.create(null);
	if (e) {
		Object.keys(e).forEach(function (k) {
			if (k !== 'default') {
				var d = Object.getOwnPropertyDescriptor(e, k);
				Object.defineProperty(n, k, d.get ? d : {
					enumerable: true,
					get: function () { return e[k]; }
				});
			}
		});
	}
	n["default"] = e;
	return Object.freeze(n);
}

var defaultResolve__default = /*#__PURE__*/_interopDefaultLegacy(defaultResolve);
var config__default = /*#__PURE__*/_interopDefaultLegacy(config);
var schemas__default = /*#__PURE__*/_interopDefaultLegacy(schemas);
var client__default = /*#__PURE__*/_interopDefaultLegacy(client);
var _asyncToGenerator__default = /*#__PURE__*/_interopDefaultLegacy(_asyncToGenerator);
var _regeneratorRuntime__default = /*#__PURE__*/_interopDefaultLegacy(_regeneratorRuntime);
var languagesLoaderFn__default = /*#__PURE__*/_interopDefaultLegacy(languagesLoaderFn);
var _defineProperty__default = /*#__PURE__*/_interopDefaultLegacy(_defineProperty);
var ___default = /*#__PURE__*/_interopDefaultLegacy(_);
var _slicedToArray__default = /*#__PURE__*/_interopDefaultLegacy(_slicedToArray);
var React__namespace = /*#__PURE__*/_interopNamespace(React);
var React__default = /*#__PURE__*/_interopDefaultLegacy(React);
var TrashIcon__default = /*#__PURE__*/_interopDefaultLegacy(TrashIcon);
var ContentCopyIcon__default = /*#__PURE__*/_interopDefaultLegacy(ContentCopyIcon);

function createCommonjsModule(fn) {
  var module = { exports: {} };
	return fn(module, module.exports), module.exports;
}

/**
 * Copyright (c) 2014-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

createCommonjsModule(function (module) {
var runtime = (function (exports) {

  var Op = Object.prototype;
  var hasOwn = Op.hasOwnProperty;
  var undefined$1; // More compressible than void 0.
  var $Symbol = typeof Symbol === "function" ? Symbol : {};
  var iteratorSymbol = $Symbol.iterator || "@@iterator";
  var asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator";
  var toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";

  function define(obj, key, value) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
    return obj[key];
  }
  try {
    // IE 8 has a broken Object.defineProperty that only works on DOM objects.
    define({}, "");
  } catch (err) {
    define = function(obj, key, value) {
      return obj[key] = value;
    };
  }

  function wrap(innerFn, outerFn, self, tryLocsList) {
    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.
    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;
    var generator = Object.create(protoGenerator.prototype);
    var context = new Context(tryLocsList || []);

    // The ._invoke method unifies the implementations of the .next,
    // .throw, and .return methods.
    generator._invoke = makeInvokeMethod(innerFn, self, context);

    return generator;
  }
  exports.wrap = wrap;

  // Try/catch helper to minimize deoptimizations. Returns a completion
  // record like context.tryEntries[i].completion. This interface could
  // have been (and was previously) designed to take a closure to be
  // invoked without arguments, but in all the cases we care about we
  // already have an existing method we want to call, so there's no need
  // to create a new function object. We can even get away with assuming
  // the method takes exactly one argument, since that happens to be true
  // in every case, so we don't have to touch the arguments object. The
  // only additional allocation required is the completion record, which
  // has a stable shape and so hopefully should be cheap to allocate.
  function tryCatch(fn, obj, arg) {
    try {
      return { type: "normal", arg: fn.call(obj, arg) };
    } catch (err) {
      return { type: "throw", arg: err };
    }
  }

  var GenStateSuspendedStart = "suspendedStart";
  var GenStateSuspendedYield = "suspendedYield";
  var GenStateExecuting = "executing";
  var GenStateCompleted = "completed";

  // Returning this object from the innerFn has the same effect as
  // breaking out of the dispatch switch statement.
  var ContinueSentinel = {};

  // Dummy constructor functions that we use as the .constructor and
  // .constructor.prototype properties for functions that return Generator
  // objects. For full spec compliance, you may wish to configure your
  // minifier not to mangle the names of these two functions.
  function Generator() {}
  function GeneratorFunction() {}
  function GeneratorFunctionPrototype() {}

  // This is a polyfill for %IteratorPrototype% for environments that
  // don't natively support it.
  var IteratorPrototype = {};
  define(IteratorPrototype, iteratorSymbol, function () {
    return this;
  });

  var getProto = Object.getPrototypeOf;
  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));
  if (NativeIteratorPrototype &&
      NativeIteratorPrototype !== Op &&
      hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {
    // This environment has a native %IteratorPrototype%; use it instead
    // of the polyfill.
    IteratorPrototype = NativeIteratorPrototype;
  }

  var Gp = GeneratorFunctionPrototype.prototype =
    Generator.prototype = Object.create(IteratorPrototype);
  GeneratorFunction.prototype = GeneratorFunctionPrototype;
  define(Gp, "constructor", GeneratorFunctionPrototype);
  define(GeneratorFunctionPrototype, "constructor", GeneratorFunction);
  GeneratorFunction.displayName = define(
    GeneratorFunctionPrototype,
    toStringTagSymbol,
    "GeneratorFunction"
  );

  // Helper for defining the .next, .throw, and .return methods of the
  // Iterator interface in terms of a single ._invoke method.
  function defineIteratorMethods(prototype) {
    ["next", "throw", "return"].forEach(function(method) {
      define(prototype, method, function(arg) {
        return this._invoke(method, arg);
      });
    });
  }

  exports.isGeneratorFunction = function(genFun) {
    var ctor = typeof genFun === "function" && genFun.constructor;
    return ctor
      ? ctor === GeneratorFunction ||
        // For the native GeneratorFunction constructor, the best we can
        // do is to check its .name property.
        (ctor.displayName || ctor.name) === "GeneratorFunction"
      : false;
  };

  exports.mark = function(genFun) {
    if (Object.setPrototypeOf) {
      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);
    } else {
      genFun.__proto__ = GeneratorFunctionPrototype;
      define(genFun, toStringTagSymbol, "GeneratorFunction");
    }
    genFun.prototype = Object.create(Gp);
    return genFun;
  };

  // Within the body of any async function, `await x` is transformed to
  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test
  // `hasOwn.call(value, "__await")` to determine if the yielded value is
  // meant to be awaited.
  exports.awrap = function(arg) {
    return { __await: arg };
  };

  function AsyncIterator(generator, PromiseImpl) {
    function invoke(method, arg, resolve, reject) {
      var record = tryCatch(generator[method], generator, arg);
      if (record.type === "throw") {
        reject(record.arg);
      } else {
        var result = record.arg;
        var value = result.value;
        if (value &&
            typeof value === "object" &&
            hasOwn.call(value, "__await")) {
          return PromiseImpl.resolve(value.__await).then(function(value) {
            invoke("next", value, resolve, reject);
          }, function(err) {
            invoke("throw", err, resolve, reject);
          });
        }

        return PromiseImpl.resolve(value).then(function(unwrapped) {
          // When a yielded Promise is resolved, its final value becomes
          // the .value of the Promise<{value,done}> result for the
          // current iteration.
          result.value = unwrapped;
          resolve(result);
        }, function(error) {
          // If a rejected Promise was yielded, throw the rejection back
          // into the async generator function so it can be handled there.
          return invoke("throw", error, resolve, reject);
        });
      }
    }

    var previousPromise;

    function enqueue(method, arg) {
      function callInvokeWithMethodAndArg() {
        return new PromiseImpl(function(resolve, reject) {
          invoke(method, arg, resolve, reject);
        });
      }

      return previousPromise =
        // If enqueue has been called before, then we want to wait until
        // all previous Promises have been resolved before calling invoke,
        // so that results are always delivered in the correct order. If
        // enqueue has not been called before, then it is important to
        // call invoke immediately, without waiting on a callback to fire,
        // so that the async generator function has the opportunity to do
        // any necessary setup in a predictable way. This predictability
        // is why the Promise constructor synchronously invokes its
        // executor callback, and why async functions synchronously
        // execute code before the first await. Since we implement simple
        // async functions in terms of async generators, it is especially
        // important to get this right, even though it requires care.
        previousPromise ? previousPromise.then(
          callInvokeWithMethodAndArg,
          // Avoid propagating failures to Promises returned by later
          // invocations of the iterator.
          callInvokeWithMethodAndArg
        ) : callInvokeWithMethodAndArg();
    }

    // Define the unified helper method that is used to implement .next,
    // .throw, and .return (see defineIteratorMethods).
    this._invoke = enqueue;
  }

  defineIteratorMethods(AsyncIterator.prototype);
  define(AsyncIterator.prototype, asyncIteratorSymbol, function () {
    return this;
  });
  exports.AsyncIterator = AsyncIterator;

  // Note that simple async functions are implemented on top of
  // AsyncIterator objects; they just return a Promise for the value of
  // the final result produced by the iterator.
  exports.async = function(innerFn, outerFn, self, tryLocsList, PromiseImpl) {
    if (PromiseImpl === void 0) PromiseImpl = Promise;

    var iter = new AsyncIterator(
      wrap(innerFn, outerFn, self, tryLocsList),
      PromiseImpl
    );

    return exports.isGeneratorFunction(outerFn)
      ? iter // If outerFn is a generator, return the full iterator.
      : iter.next().then(function(result) {
          return result.done ? result.value : iter.next();
        });
  };

  function makeInvokeMethod(innerFn, self, context) {
    var state = GenStateSuspendedStart;

    return function invoke(method, arg) {
      if (state === GenStateExecuting) {
        throw new Error("Generator is already running");
      }

      if (state === GenStateCompleted) {
        if (method === "throw") {
          throw arg;
        }

        // Be forgiving, per 25.3.3.3.3 of the spec:
        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume
        return doneResult();
      }

      context.method = method;
      context.arg = arg;

      while (true) {
        var delegate = context.delegate;
        if (delegate) {
          var delegateResult = maybeInvokeDelegate(delegate, context);
          if (delegateResult) {
            if (delegateResult === ContinueSentinel) continue;
            return delegateResult;
          }
        }

        if (context.method === "next") {
          // Setting context._sent for legacy support of Babel's
          // function.sent implementation.
          context.sent = context._sent = context.arg;

        } else if (context.method === "throw") {
          if (state === GenStateSuspendedStart) {
            state = GenStateCompleted;
            throw context.arg;
          }

          context.dispatchException(context.arg);

        } else if (context.method === "return") {
          context.abrupt("return", context.arg);
        }

        state = GenStateExecuting;

        var record = tryCatch(innerFn, self, context);
        if (record.type === "normal") {
          // If an exception is thrown from innerFn, we leave state ===
          // GenStateExecuting and loop back for another invocation.
          state = context.done
            ? GenStateCompleted
            : GenStateSuspendedYield;

          if (record.arg === ContinueSentinel) {
            continue;
          }

          return {
            value: record.arg,
            done: context.done
          };

        } else if (record.type === "throw") {
          state = GenStateCompleted;
          // Dispatch the exception by looping back around to the
          // context.dispatchException(context.arg) call above.
          context.method = "throw";
          context.arg = record.arg;
        }
      }
    };
  }

  // Call delegate.iterator[context.method](context.arg) and handle the
  // result, either by returning a { value, done } result from the
  // delegate iterator, or by modifying context.method and context.arg,
  // setting context.delegate to null, and returning the ContinueSentinel.
  function maybeInvokeDelegate(delegate, context) {
    var method = delegate.iterator[context.method];
    if (method === undefined$1) {
      // A .throw or .return when the delegate iterator has no .throw
      // method always terminates the yield* loop.
      context.delegate = null;

      if (context.method === "throw") {
        // Note: ["return"] must be used for ES3 parsing compatibility.
        if (delegate.iterator["return"]) {
          // If the delegate iterator has a return method, give it a
          // chance to clean up.
          context.method = "return";
          context.arg = undefined$1;
          maybeInvokeDelegate(delegate, context);

          if (context.method === "throw") {
            // If maybeInvokeDelegate(context) changed context.method from
            // "return" to "throw", let that override the TypeError below.
            return ContinueSentinel;
          }
        }

        context.method = "throw";
        context.arg = new TypeError(
          "The iterator does not provide a 'throw' method");
      }

      return ContinueSentinel;
    }

    var record = tryCatch(method, delegate.iterator, context.arg);

    if (record.type === "throw") {
      context.method = "throw";
      context.arg = record.arg;
      context.delegate = null;
      return ContinueSentinel;
    }

    var info = record.arg;

    if (! info) {
      context.method = "throw";
      context.arg = new TypeError("iterator result is not an object");
      context.delegate = null;
      return ContinueSentinel;
    }

    if (info.done) {
      // Assign the result of the finished delegate to the temporary
      // variable specified by delegate.resultName (see delegateYield).
      context[delegate.resultName] = info.value;

      // Resume execution at the desired location (see delegateYield).
      context.next = delegate.nextLoc;

      // If context.method was "throw" but the delegate handled the
      // exception, let the outer generator proceed normally. If
      // context.method was "next", forget context.arg since it has been
      // "consumed" by the delegate iterator. If context.method was
      // "return", allow the original .return call to continue in the
      // outer generator.
      if (context.method !== "return") {
        context.method = "next";
        context.arg = undefined$1;
      }

    } else {
      // Re-yield the result returned by the delegate method.
      return info;
    }

    // The delegate iterator is finished, so forget it and continue with
    // the outer generator.
    context.delegate = null;
    return ContinueSentinel;
  }

  // Define Generator.prototype.{next,throw,return} in terms of the
  // unified ._invoke helper method.
  defineIteratorMethods(Gp);

  define(Gp, toStringTagSymbol, "Generator");

  // A Generator should always return itself as the iterator object when the
  // @@iterator function is called on it. Some browsers' implementations of the
  // iterator prototype chain incorrectly implement this, causing the Generator
  // object to not be returned from this call. This ensures that doesn't happen.
  // See https://github.com/facebook/regenerator/issues/274 for more details.
  define(Gp, iteratorSymbol, function() {
    return this;
  });

  define(Gp, "toString", function() {
    return "[object Generator]";
  });

  function pushTryEntry(locs) {
    var entry = { tryLoc: locs[0] };

    if (1 in locs) {
      entry.catchLoc = locs[1];
    }

    if (2 in locs) {
      entry.finallyLoc = locs[2];
      entry.afterLoc = locs[3];
    }

    this.tryEntries.push(entry);
  }

  function resetTryEntry(entry) {
    var record = entry.completion || {};
    record.type = "normal";
    delete record.arg;
    entry.completion = record;
  }

  function Context(tryLocsList) {
    // The root entry object (effectively a try statement without a catch
    // or a finally block) gives us a place to store values thrown from
    // locations where there is no enclosing try statement.
    this.tryEntries = [{ tryLoc: "root" }];
    tryLocsList.forEach(pushTryEntry, this);
    this.reset(true);
  }

  exports.keys = function(object) {
    var keys = [];
    for (var key in object) {
      keys.push(key);
    }
    keys.reverse();

    // Rather than returning an object with a next method, we keep
    // things simple and return the next function itself.
    return function next() {
      while (keys.length) {
        var key = keys.pop();
        if (key in object) {
          next.value = key;
          next.done = false;
          return next;
        }
      }

      // To avoid creating an additional object, we just hang the .value
      // and .done properties off the next function object itself. This
      // also ensures that the minifier will not anonymize the function.
      next.done = true;
      return next;
    };
  };

  function values(iterable) {
    if (iterable) {
      var iteratorMethod = iterable[iteratorSymbol];
      if (iteratorMethod) {
        return iteratorMethod.call(iterable);
      }

      if (typeof iterable.next === "function") {
        return iterable;
      }

      if (!isNaN(iterable.length)) {
        var i = -1, next = function next() {
          while (++i < iterable.length) {
            if (hasOwn.call(iterable, i)) {
              next.value = iterable[i];
              next.done = false;
              return next;
            }
          }

          next.value = undefined$1;
          next.done = true;

          return next;
        };

        return next.next = next;
      }
    }

    // Return an iterator with no values.
    return { next: doneResult };
  }
  exports.values = values;

  function doneResult() {
    return { value: undefined$1, done: true };
  }

  Context.prototype = {
    constructor: Context,

    reset: function(skipTempReset) {
      this.prev = 0;
      this.next = 0;
      // Resetting context._sent for legacy support of Babel's
      // function.sent implementation.
      this.sent = this._sent = undefined$1;
      this.done = false;
      this.delegate = null;

      this.method = "next";
      this.arg = undefined$1;

      this.tryEntries.forEach(resetTryEntry);

      if (!skipTempReset) {
        for (var name in this) {
          // Not sure about the optimal order of these conditions:
          if (name.charAt(0) === "t" &&
              hasOwn.call(this, name) &&
              !isNaN(+name.slice(1))) {
            this[name] = undefined$1;
          }
        }
      }
    },

    stop: function() {
      this.done = true;

      var rootEntry = this.tryEntries[0];
      var rootRecord = rootEntry.completion;
      if (rootRecord.type === "throw") {
        throw rootRecord.arg;
      }

      return this.rval;
    },

    dispatchException: function(exception) {
      if (this.done) {
        throw exception;
      }

      var context = this;
      function handle(loc, caught) {
        record.type = "throw";
        record.arg = exception;
        context.next = loc;

        if (caught) {
          // If the dispatched exception was caught by a catch block,
          // then let that catch block handle the exception normally.
          context.method = "next";
          context.arg = undefined$1;
        }

        return !! caught;
      }

      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        var record = entry.completion;

        if (entry.tryLoc === "root") {
          // Exception thrown outside of any try block that could handle
          // it, so set the completion value of the entire function to
          // throw the exception.
          return handle("end");
        }

        if (entry.tryLoc <= this.prev) {
          var hasCatch = hasOwn.call(entry, "catchLoc");
          var hasFinally = hasOwn.call(entry, "finallyLoc");

          if (hasCatch && hasFinally) {
            if (this.prev < entry.catchLoc) {
              return handle(entry.catchLoc, true);
            } else if (this.prev < entry.finallyLoc) {
              return handle(entry.finallyLoc);
            }

          } else if (hasCatch) {
            if (this.prev < entry.catchLoc) {
              return handle(entry.catchLoc, true);
            }

          } else if (hasFinally) {
            if (this.prev < entry.finallyLoc) {
              return handle(entry.finallyLoc);
            }

          } else {
            throw new Error("try statement without catch or finally");
          }
        }
      }
    },

    abrupt: function(type, arg) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.tryLoc <= this.prev &&
            hasOwn.call(entry, "finallyLoc") &&
            this.prev < entry.finallyLoc) {
          var finallyEntry = entry;
          break;
        }
      }

      if (finallyEntry &&
          (type === "break" ||
           type === "continue") &&
          finallyEntry.tryLoc <= arg &&
          arg <= finallyEntry.finallyLoc) {
        // Ignore the finally entry if control is not jumping to a
        // location outside the try/catch block.
        finallyEntry = null;
      }

      var record = finallyEntry ? finallyEntry.completion : {};
      record.type = type;
      record.arg = arg;

      if (finallyEntry) {
        this.method = "next";
        this.next = finallyEntry.finallyLoc;
        return ContinueSentinel;
      }

      return this.complete(record);
    },

    complete: function(record, afterLoc) {
      if (record.type === "throw") {
        throw record.arg;
      }

      if (record.type === "break" ||
          record.type === "continue") {
        this.next = record.arg;
      } else if (record.type === "return") {
        this.rval = this.arg = record.arg;
        this.method = "return";
        this.next = "end";
      } else if (record.type === "normal" && afterLoc) {
        this.next = afterLoc;
      }

      return ContinueSentinel;
    },

    finish: function(finallyLoc) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.finallyLoc === finallyLoc) {
          this.complete(entry.completion, entry.afterLoc);
          resetTryEntry(entry);
          return ContinueSentinel;
        }
      }
    },

    "catch": function(tryLoc) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.tryLoc === tryLoc) {
          var record = entry.completion;
          if (record.type === "throw") {
            var thrown = record.arg;
            resetTryEntry(entry);
          }
          return thrown;
        }
      }

      // The context.catch method must only be called with a location
      // argument that corresponds to a known catch block.
      throw new Error("illegal catch attempt");
    },

    delegateYield: function(iterable, resultName, nextLoc) {
      this.delegate = {
        iterator: values(iterable),
        resultName: resultName,
        nextLoc: nextLoc
      };

      if (this.method === "next") {
        // Deliberately forget the last sent value so that we don't
        // accidentally pass it on to the delegate.
        this.arg = undefined$1;
      }

      return ContinueSentinel;
    }
  };

  // Regardless of whether this script is executing as a CommonJS module
  // or not, return the runtime object so that we can declare the variable
  // regeneratorRuntime in the outer scope, which allows this module to be
  // injected easily by `bin/regenerator --include-runtime script.js`.
  return exports;

}(
  // If this script is executing as a CommonJS module, use module.exports
  // as the regeneratorRuntime namespace. Otherwise create a new empty
  // object. Either way, the resulting object will be used to initialize
  // the regeneratorRuntime variable at the top of this file.
  module.exports 
));

try {
  regeneratorRuntime = runtime;
} catch (accidentalStrictMode) {
  // This module should not be running in strict mode, so the above
  // assignment should always work unless something is misconfigured. Just
  // in case runtime.js accidentally runs in strict mode, in modern engines
  // we can explicitly access globalThis. In older engines we can escape
  // strict mode using a global Function call. This could conceivably fail
  // if a Content Security Policy forbids using Function, but in that case
  // the proper solution is to fix the accidental strict mode problem. If
  // you've misconfigured your bundler to force strict mode and applied a
  // CSP to forbid Function, and you're not willing to fix either of those
  // problems, please detail your unique predicament in a GitHub issue.
  if (typeof globalThis === "object") {
    globalThis.regeneratorRuntime = runtime;
  } else {
    Function("r", "regeneratorRuntime = r")(runtime);
  }
}
});

var LanguageCultures = [{
  value: 'af',
  title: 'Afrikaans'
}, {
  value: 'af-ZA',
  title: 'Afrikaans (South Africa)'
}, {
  value: 'ar',
  title: 'Arabic'
}, {
  value: 'ar-AE',
  title: 'Arabic (U.A.E.)'
}, {
  value: 'ar-BH',
  title: 'Arabic (Bahrain)'
}, {
  value: 'ar-DZ',
  title: 'Arabic (Algeria)'
}, {
  value: 'ar-EG',
  title: 'Arabic (Egypt)'
}, {
  value: 'ar-IQ',
  title: 'Arabic (Iraq)'
}, {
  value: 'ar-JO',
  title: 'Arabic (Jordan)'
}, {
  value: 'ar-KW',
  title: 'Arabic (Kuwait)'
}, {
  value: 'ar-LB',
  title: 'Arabic (Lebanon)'
}, {
  value: 'ar-LY',
  title: 'Arabic (Libya)'
}, {
  value: 'ar-MA',
  title: 'Arabic (Morocco)'
}, {
  value: 'ar-OM',
  title: 'Arabic (Oman)'
}, {
  value: 'ar-QA',
  title: 'Arabic (Qatar)'
}, {
  value: 'ar-SA',
  title: 'Arabic (Saudi Arabia)'
}, {
  value: 'ar-SY',
  title: 'Arabic (Syria)'
}, {
  value: 'ar-TN',
  title: 'Arabic (Tunisia)'
}, {
  value: 'ar-YE',
  title: 'Arabic (Yemen)'
}, {
  value: 'az',
  title: 'Azeri'
}, {
  value: 'az-Cyrl-AZ',
  title: 'Azeri (Cyrillic, Azerbaijan)'
}, {
  value: 'az-Latn-AZ',
  title: 'Azeri (Latin, Azerbaijan)'
}, {
  value: 'be',
  title: 'Belarusian'
}, {
  value: 'be-BY',
  title: 'Belarusian (Belarus)'
}, {
  value: 'bg',
  title: 'Bulgarian'
}, {
  value: 'bg-BG',
  title: 'Bulgarian (Bulgaria)'
}, {
  value: 'bs-Latn-BA',
  title: 'Bosnian (Bosnia and Herzegovina)'
}, {
  value: 'ca',
  title: 'Catalan'
}, {
  value: 'ca-ES',
  title: 'Catalan (Catalan)'
}, {
  value: 'cs',
  title: 'Czech'
}, {
  value: 'cs-CZ',
  title: 'Czech (Czech Republic)'
}, {
  value: 'cy-GB',
  title: 'Welsh (United Kingdom)'
}, {
  value: 'da',
  title: 'Danish'
}, {
  value: 'da-DK',
  title: 'Danish (Denmark)'
}, {
  value: 'de',
  title: 'German'
}, {
  value: 'de-AT',
  title: 'German (Austria)'
}, {
  value: 'de-DE',
  title: 'German (Germany)'
}, {
  value: 'de-CH',
  title: 'German (Switzerland)'
}, {
  value: 'de-LI',
  title: 'German (Liechtenstein)'
}, {
  value: 'de-LU',
  title: 'German (Luxembourg)'
}, {
  value: 'dv',
  title: 'Divehi'
}, {
  value: 'dv-MV',
  title: 'Divehi (Maldives)'
}, {
  value: 'el',
  title: 'Greek'
}, {
  value: 'el-GR',
  title: 'Greek (Greece)'
}, {
  value: 'en',
  title: 'English'
}, {
  value: 'en-029',
  title: 'English (Caribbean)'
}, {
  value: 'en-AU',
  title: 'English (Australia)'
}, {
  value: 'en-BZ',
  title: 'English (Belize)'
}, {
  value: 'en-CA',
  title: 'English (Canada)'
}, {
  value: 'en-GB',
  title: 'English (United Kingdom)'
}, {
  value: 'en-IE',
  title: 'English (Ireland)'
}, {
  value: 'en-JM',
  title: 'English (Jamaica)'
}, {
  value: 'en-NZ',
  title: 'English (New Zealand)'
}, {
  value: 'en-PH',
  title: 'English (Republic of the Philippines)'
}, {
  value: 'en-TT',
  title: 'English (Trinidad and Tobago)'
}, {
  value: 'en-US',
  title: 'English (United States)'
}, {
  value: 'en-ZA',
  title: 'English (South Africa)'
}, {
  value: 'en-ZW',
  title: 'English (Zimbabwe)'
}, {
  value: 'es',
  title: 'Spanish'
}, {
  value: 'es-AR',
  title: 'Spanish (Argentina)'
}, {
  value: 'es-BO',
  title: 'Spanish (Bolivia)'
}, {
  value: 'es-CL',
  title: 'Spanish (Chile)'
}, {
  value: 'es-CO',
  title: 'Spanish (Colombia)'
}, {
  value: 'es-CR',
  title: 'Spanish (Costa Rica)'
}, {
  value: 'es-DO',
  title: 'Spanish (Dominican Republic)'
}, {
  value: 'es-EC',
  title: 'Spanish (Ecuador)'
}, {
  value: 'es-ES',
  title: 'Spanish (Spain)'
}, {
  value: 'es-GT',
  title: 'Spanish (Guatemala)'
}, {
  value: 'es-HN',
  title: 'Spanish (Honduras)'
}, {
  value: 'es-MX',
  title: 'Spanish (Mexico)'
}, {
  value: 'es-NI',
  title: 'Spanish (Nicaragua)'
}, {
  value: 'es-PA',
  title: 'Spanish (Panama)'
}, {
  value: 'es-PE',
  title: 'Spanish (Peru)'
}, {
  value: 'es-PR',
  title: 'Spanish (Puerto Rico)'
}, {
  value: 'es-PY',
  title: 'Spanish (Paraguay)'
}, {
  value: 'es-SV',
  title: 'Spanish (El Salvador)'
}, {
  value: 'es-UY',
  title: 'Spanish (Uruguay)'
}, {
  value: 'es-VE',
  title: 'Spanish (Venezuela)'
}, {
  value: 'et',
  title: 'Estonian'
}, {
  value: 'et-EE',
  title: 'Estonian (Estonia)'
}, {
  value: 'eu',
  title: 'Basque'
}, {
  value: 'eu-ES',
  title: 'Basque (Basque)'
}, {
  value: 'fa',
  title: 'Persian'
}, {
  value: 'fa-IR',
  title: 'Persian (Iran)'
}, {
  value: 'fi',
  title: 'Finnish'
}, {
  value: 'fi-FI',
  title: 'Finnish (Finland)'
}, {
  value: 'fo',
  title: 'Faroese'
}, {
  value: 'fo-FO',
  title: 'Faroese (Faroe Islands)'
}, {
  value: 'fr',
  title: 'French'
}, {
  value: 'fr-BE',
  title: 'French (Belgium)'
}, {
  value: 'fr-CA',
  title: 'French (Canada)'
}, {
  value: 'fr-FR',
  title: 'French (France)'
}, {
  value: 'fr-CH',
  title: 'French (Switzerland)'
}, {
  value: 'fr-LU',
  title: 'French (Luxembourg)'
}, {
  value: 'fr-MC',
  title: 'French (Principality of Monaco)'
}, {
  value: 'gl',
  title: 'Galician'
}, {
  value: 'gl-ES',
  title: 'Galician (Galician)'
}, {
  value: 'gu',
  title: 'Gujarati'
}, {
  value: 'gu-IN',
  title: 'Gujarati (India)'
}, {
  value: 'he',
  title: 'Hebrew'
}, {
  value: 'he-IL',
  title: 'Hebrew (Israel)'
}, {
  value: 'hi',
  title: 'Hindi'
}, {
  value: 'hi-IN',
  title: 'Hindi (India)'
}, {
  value: 'hr',
  title: 'Croatian'
}, {
  value: 'hr-BA',
  title: 'Croatian (Bosnia and Herzegovina)'
}, {
  value: 'hr-HR',
  title: 'Croatian (Croatia)'
}, {
  value: 'hu',
  title: 'Hungarian'
}, {
  value: 'hu-HU',
  title: 'Hungarian (Hungary)'
}, {
  value: 'hy',
  title: 'Armenian'
}, {
  value: 'hy-AM',
  title: 'Armenian (Armenia)'
}, {
  value: 'id',
  title: 'Indonesian'
}, {
  value: 'id-ID',
  title: 'Indonesian (Indonesia)'
}, {
  value: 'is',
  title: 'Icelandic'
}, {
  value: 'is-IS',
  title: 'Icelandic (Iceland)'
}, {
  value: 'it',
  title: 'Italian'
}, {
  value: 'it-CH',
  title: 'Italian (Switzerland)'
}, {
  value: 'it-IT',
  title: 'Italian (Italy)'
}, {
  value: 'ja',
  title: 'Japanese'
}, {
  value: 'ja-JP',
  title: 'Japanese (Japan)'
}, {
  value: 'ka',
  title: 'Georgian'
}, {
  value: 'ka-GE',
  title: 'Georgian (Georgia)'
}, {
  value: 'kk',
  title: 'Kazakh'
}, {
  value: 'kk-KZ',
  title: 'Kazakh (Kazakhstan)'
}, {
  value: 'kn',
  title: 'Kannada'
}, {
  value: 'kn-IN',
  title: 'Kannada (India)'
}, {
  value: 'ko',
  title: 'Korean'
}, {
  value: 'kok',
  title: 'Konkani'
}, {
  value: 'kok-IN',
  title: 'Konkani (India)'
}, {
  value: 'ko-KR',
  title: 'Korean (Korea)'
}, {
  value: 'ky',
  title: 'Kyrgyz'
}, {
  value: 'ky-KG',
  title: 'Kyrgyz (Kyrgyzstan)'
}, {
  value: 'lt',
  title: 'Lithuanian'
}, {
  value: 'lt-LT',
  title: 'Lithuanian (Lithuania)'
}, {
  value: 'lv',
  title: 'Latvian'
}, {
  value: 'lv-LV',
  title: 'Latvian (Latvia)'
}, {
  value: 'mi-NZ',
  title: 'Maori (New Zealand)'
}, {
  value: 'mk',
  title: 'Macedonian'
}, {
  value: 'mk-MK',
  title: 'Macedonian (Former Yugoslav Republic of Macedonia)'
}, {
  value: 'mn',
  title: 'Mongolian'
}, {
  value: 'mn-MN',
  title: 'Mongolian (Cyrillic, Mongolia)'
}, {
  value: 'mr',
  title: 'Marathi'
}, {
  value: 'mr-IN',
  title: 'Marathi (India)'
}, {
  value: 'ms',
  title: 'Malay'
}, {
  value: 'ms-BN',
  title: 'Malay (Brunei Darussalam)'
}, {
  value: 'ms-MY',
  title: 'Malay (Malaysia)'
}, {
  value: 'mt-MT',
  title: 'Maltese (Malta)'
}, {
  value: 'nb-NO',
  title: 'Norwegian, Bokmal (Norway)'
}, {
  value: 'nl',
  title: 'Dutch'
}, {
  value: 'nl-BE',
  title: 'Dutch (Belgium)'
}, {
  value: 'nl-NL',
  title: 'Dutch (Netherlands)'
}, {
  value: 'nn-NO',
  title: 'Norwegian, Nynorsk (Norway)'
}, {
  value: 'no',
  title: 'Norwegian'
}, {
  value: 'ns-ZA',
  title: 'Northern Sotho (South Africa)'
}, {
  value: 'pa',
  title: 'Punjabi'
}, {
  value: 'pa-IN',
  title: 'Punjabi (India)'
}, {
  value: 'pl',
  title: 'Polish'
}, {
  value: 'pl-PL',
  title: 'Polish (Poland)'
}, {
  value: 'pt',
  title: 'Portuguese'
}, {
  value: 'pt-BR',
  title: 'Portuguese (Brazil)'
}, {
  value: 'pt-PT',
  title: 'Portuguese (Portugal)'
}, {
  value: 'quz-BO',
  title: 'Quechua (Bolivia)'
}, {
  value: 'quz-EC',
  title: 'Quechua (Ecuador)'
}, {
  value: 'quz-PE',
  title: 'Quechua (Peru)'
}, {
  value: 'ro',
  title: 'Romanian'
}, {
  value: 'ro-RO',
  title: 'Romanian (Romania)'
}, {
  value: 'ru',
  title: 'Russian'
}, {
  value: 'ru-RU',
  title: 'Russian (Russia)'
}, {
  value: 'sa',
  title: 'Sanskrit'
}, {
  value: 'sa-IN',
  title: 'Sanskrit (India)'
}, {
  value: 'se-FI',
  title: 'Sami (Northern) (Finland)'
}, {
  value: 'se-NO',
  title: 'Sami (Northern) (Norway)'
}, {
  value: 'se-SE',
  title: 'Sami (Northern) (Sweden)'
}, {
  value: 'sk',
  title: 'Slovak'
}, {
  value: 'sk-SK',
  title: 'Slovak (Slovakia)'
}, {
  value: 'sl',
  title: 'Slovenian'
}, {
  value: 'sl-SI',
  title: 'Slovenian (Slovenia)'
}, {
  value: 'sma-NO',
  title: 'Sami (Southern) (Norway)'
}, {
  value: 'sma-SE',
  title: 'Sami (Southern) (Sweden)'
}, {
  value: 'smj-NO',
  title: 'Sami (Lule) (Norway)'
}, {
  value: 'smj-SE',
  title: 'Sami (Lule) (Sweden)'
}, {
  value: 'smn-FI',
  title: 'Sami (Inari) (Finland)'
}, {
  value: 'sms-FI',
  title: 'Sami (Skolt) (Finland)'
}, {
  value: 'sq',
  title: 'Albanian'
}, {
  value: 'sq-AL',
  title: 'Albanian (Albania)'
}, {
  value: 'sr',
  title: 'Serbian'
}, {
  value: 'sr-Cyrl-BA',
  title: 'Serbian (Cyrillic) (Bosnia and Herzegovina)'
}, {
  value: 'sr-Cyrl-CS',
  title: 'Serbian (Cyrillic, Serbia)'
}, {
  value: 'sr-Latn-BA',
  title: 'Serbian (Latin) (Bosnia and Herzegovina)'
}, {
  value: 'sr-Latn-CS',
  title: 'Serbian (Latin, Serbia)'
}, {
  value: 'sv',
  title: 'Swedish'
}, {
  value: 'sv-FI',
  title: 'Swedish (Finland)'
}, {
  value: 'sv-SE',
  title: 'Swedish (Sweden)'
}, {
  value: 'sw',
  title: 'Kiswahili'
}, {
  value: 'sw-KE',
  title: 'Kiswahili (Kenya)'
}, {
  value: 'syr',
  title: 'Syriac'
}, {
  value: 'syr-SY',
  title: 'Syriac (Syria)'
}, {
  value: 'ta',
  title: 'Tamil'
}, {
  value: 'ta-IN',
  title: 'Tamil (India)'
}, {
  value: 'te',
  title: 'Telugu'
}, {
  value: 'te-IN',
  title: 'Telugu (India)'
}, {
  value: 'th',
  title: 'Thai'
}, {
  value: 'th-TH',
  title: 'Thai (Thailand)'
}, {
  value: 'tn-ZA',
  title: 'Tswana (South Africa)'
}, {
  value: 'tr',
  title: 'Turkish'
}, {
  value: 'tr-TR',
  title: 'Turkish (Turkey)'
}, {
  value: 'tt',
  title: 'Tatar'
}, {
  value: 'tt-RU',
  title: 'Tatar (Russia)'
}, {
  value: 'uk',
  title: 'Ukrainian'
}, {
  value: 'uk-UA',
  title: 'Ukrainian (Ukraine)'
}, {
  value: 'ur',
  title: 'Urdu'
}, {
  value: 'ur-PK',
  title: 'Urdu (Islamic Republic of Pakistan)'
}, {
  value: 'uz',
  title: 'Uzbek'
}, {
  value: 'uz-Cyrl-UZ',
  title: 'Uzbek (Cyrillic, Uzbekistan)'
}, {
  value: 'uz-Latn-UZ',
  title: 'Uzbek (Latin, Uzbekistan)'
}, {
  value: 'vi',
  title: 'Vietnamese'
}, {
  value: 'vi-VN',
  title: 'Vietnamese (Vietnam)'
}, {
  value: 'xh-ZA',
  title: 'Xhosa (South Africa)'
}, {
  value: 'zh-CN',
  title: "Chinese (People's Republic of China)"
}, {
  value: 'zh-HK',
  title: 'Chinese (Hong Kong S.A.R.)'
}, {
  value: 'zh-CHS',
  title: 'Chinese (Simplified)'
}, {
  value: 'zh-CHT',
  title: 'Chinese (Traditional)'
}, {
  value: 'zh-MO',
  title: 'Chinese (Macao S.A.R.)'
}, {
  value: 'zh-SG',
  title: 'Chinese (Singapore)'
}, {
  value: 'zh-TW',
  title: 'Chinese (Taiwan)'
}, {
  value: 'zu-ZA',
  title: 'Zulu (South Africa)'
}];

var I18nPrefix = 'i18n';

var I18nDelimiter = '__i18n_';

var ReferenceBehavior;

(function (ReferenceBehavior) {
  ReferenceBehavior["STRONG"] = "strong";
  ReferenceBehavior["WEAK"] = "weak";
  ReferenceBehavior["DISABLED"] = "disabled";
})(ReferenceBehavior || (ReferenceBehavior = {}));

var IdStructure;

(function (IdStructure) {
  IdStructure["SUBPATH"] = "subpath";
  IdStructure["DELIMITER"] = "delimiter";
})(IdStructure || (IdStructure = {}));

var UiMessages = {
  publishing: 'Publishing...',
  publish: 'Publish',
  updatingIntlFields: 'Updating i18n fields',
  intlFieldsUpdated: 'i18n fields updated',
  baseDocumentCopied: 'Base document copied',
  translationCreatedToast: {
    title: function title(name) {
      return "Translation created: ".concat(name);
    },
    description: function description(name) {
      return "The content from \u2018".concat(name, "\u2019 is copied into the new document translation.");
    }
  },
  loading: 'Loading languages...',
  draft: 'Draft',
  missingTranslations: 'Following languages are missing some translations compared to the base language',
  base: 'Base',
  missing: 'Missing',
  deleteAll: {
    buttonTitle: 'Delete (incl. translations)',
    deleting: 'Deleting...'
  },
  duplicateAll: {
    buttonTitle: 'Duplicate (incl. translations)',
    duplicating: 'Duplicating...'
  },
  translationsMaintenance: {
    title: 'Translation Maintenance',
    selectSchemaPlaceholder: 'Select schema type',
    idStructureMismatch: 'document(s) with mismatched ID structures',
    missingLanguageField: 'document(s) are missing the language field',
    missingDocumentRefs: 'document(s) have missing translation references',
    missingBaseDocumentRefs: 'document(s) have missing base document references',
    orphanDocuments: 'orphaned translation document(s)',
    referenceBehaviorMismatch: 'document(s) with mismatched reference behaviors',
    baseLanguageMismatch: 'base document(s) with mismatched language field',
    fix: 'Fix',
    pendingTransactionDialog: {
      header: 'Confirm pending transaction',
      caution: 'Before continuing please review the transactions. Keep in mind, the translation maintenance functionality may remove or update many documents at once. It is recommended to back-up your dataset before performing data maintenance',
      cancel: 'Cancel',
      confirm: 'Confirm operation'
    }
  },
  errors: {
    baseDocumentNotPublished: 'It looks like you have not published your base translation yet. When using strong references it is required to publish the base document before publishing any translated entries'
  },
  languageSelect: {
    placeholder: 'Switch language',
    listLabels: {
      existing: 'Select document translations',
      missing: 'Create new document translations'
    }
  }
};

var getSchema = function getSchema(name) {
  return schemas__default["default"]._original.types.find(function (s) {
    return s.name === name;
  });
};

var getI18nConfigFromType = function getI18nConfigFromType(type) {
  var i18nconfig = {};

  if (type) {
    if (typeof type === 'string') {
      var schema = getSchema(type);

      if (schema && typeof schema.i18n !== 'boolean') {
        i18nconfig = schema.i18n;
      }
    } else if (typeof type.i18n !== 'boolean') {
      i18nconfig = type.i18n;
    }
  }

  return i18nconfig;
};

function getConfig(type) {
  var _schemaConfig$fieldNa, _cfg$fieldNames, _schemaConfig$fieldNa2, _cfg$fieldNames2, _schemaConfig$fieldNa3, _cfg$fieldNames3;

  var schemaConfig = getI18nConfigFromType(type);
  var cfg = config__default["default"];
  return {
    base: (schemaConfig === null || schemaConfig === void 0 ? void 0 : schemaConfig.base) || (cfg === null || cfg === void 0 ? void 0 : cfg.base) || '',
    idStructure: cfg.idStructure || IdStructure.DELIMITER,
    referenceBehavior: cfg.referenceBehavior || ReferenceBehavior.STRONG,
    withTranslationsMaintenance: (cfg === null || cfg === void 0 ? void 0 : cfg.withTranslationsMaintenance) === true,
    fieldNames: {
      lang: (schemaConfig === null || schemaConfig === void 0 ? void 0 : (_schemaConfig$fieldNa = schemaConfig.fieldNames) === null || _schemaConfig$fieldNa === void 0 ? void 0 : _schemaConfig$fieldNa.lang) || (cfg === null || cfg === void 0 ? void 0 : (_cfg$fieldNames = cfg.fieldNames) === null || _cfg$fieldNames === void 0 ? void 0 : _cfg$fieldNames.lang) || '__i18n_lang',
      references: (schemaConfig === null || schemaConfig === void 0 ? void 0 : (_schemaConfig$fieldNa2 = schemaConfig.fieldNames) === null || _schemaConfig$fieldNa2 === void 0 ? void 0 : _schemaConfig$fieldNa2.references) || (cfg === null || cfg === void 0 ? void 0 : (_cfg$fieldNames2 = cfg.fieldNames) === null || _cfg$fieldNames2 === void 0 ? void 0 : _cfg$fieldNames2.references) || '__i18n_refs',
      baseReference: (schemaConfig === null || schemaConfig === void 0 ? void 0 : (_schemaConfig$fieldNa3 = schemaConfig.fieldNames) === null || _schemaConfig$fieldNa3 === void 0 ? void 0 : _schemaConfig$fieldNa3.baseReference) || (cfg === null || cfg === void 0 ? void 0 : (_cfg$fieldNames3 = cfg.fieldNames) === null || _cfg$fieldNames3 === void 0 ? void 0 : _cfg$fieldNames3.baseReference) || '__i18n_base'
    },
    languages: (schemaConfig === null || schemaConfig === void 0 ? void 0 : schemaConfig.languages) || (cfg === null || cfg === void 0 ? void 0 : cfg.languages) || []
  };
}

var buildDocId = function buildDocId(id, lang) {
  var config = getConfig();
  if (config.idStructure === IdStructure.DELIMITER) return "".concat(id).concat(I18nDelimiter).concat(lang || '*');
  return "".concat(I18nPrefix, ".").concat(id, ".").concat(lang || '*');
};

var normalizeLanguageList = function normalizeLanguageList(languages) {
  return languages.map(function (l) {
    if (typeof l === 'string') {
      var langCult = LanguageCultures.find(function (x) {
        return x.value === l;
      });
      if (langCult) return {
        title: langCult.title,
        id: l
      };
      return {
        title: l,
        id: l
      };
    }

    if ('name' in l) {
      console.warn("The \"name\" field in your language configuration is deprecated, please replace it with \"id\".");
      return {
        title: l.title,
        id: l.name
      };
    }

    return {
      title: l.title,
      id: l.id
    };
  });
};

var getBaseLanguage = function getBaseLanguage(langs, base) {
  if (base) return langs.find(function (l) {
    return l.id === base;
  }) || null;
  return langs.length > 0 ? langs[0] : null;
};

var getSanityClient = function getSanityClient() {
  return client__default["default"].withConfig({
    apiVersion: "2021-10-01"
  });
};

var objectSafeGet = get;

/*
  const obj = {a: {aa: {aaa: 2}}, b: 4};

  get(obj, 'a.aa.aaa'); // 2
  get(obj, ['a', 'aa', 'aaa']); // 2

  get(obj, 'b.bb.bbb'); // undefined
  get(obj, ['b', 'bb', 'bbb']); // undefined

  get(obj.a, 'aa.aaa'); // 2
  get(obj.a, ['aa', 'aaa']); // 2

  get(obj.b, 'bb.bbb'); // undefined
  get(obj.b, ['bb', 'bbb']); // undefined

  get(obj.b, 'bb.bbb', 42); // 42
  get(obj.b, ['bb', 'bbb'], 42); // 42

  get(null, 'a'); // undefined
  get(undefined, ['a']); // undefined

  get(null, 'a', 42); // 42
  get(undefined, ['a'], 42); // 42

  const obj = {a: {}};
  const sym = Symbol();
  obj.a[sym] = 4;
  get(obj.a, sym); // 4
*/

function get(obj, propsArg, defaultValue) {
  if (!obj) {
    return defaultValue;
  }
  var props, prop;
  if (Array.isArray(propsArg)) {
    props = propsArg.slice(0);
  }
  if (typeof propsArg == 'string') {
    props = propsArg.split('.');
  }
  if (typeof propsArg == 'symbol') {
    props = [propsArg];
  }
  if (!Array.isArray(props)) {
    throw new Error('props arg must be an array, a string or a symbol');
  }
  while (props.length) {
    prop = props.shift();
    if (!obj) {
      return defaultValue;
    }
    obj = obj[prop];
    if (obj === undefined) {
      return defaultValue;
    }
  }
  return obj;
}

var getLanguagesFromOption = /*#__PURE__*/function () {
  var _ref = _asyncToGenerator__default["default"]( /*#__PURE__*/_regeneratorRuntime__default["default"].mark(function _callee2(langs, document) {
    var languages, possiblePromise;
    return _regeneratorRuntime__default["default"].wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            _context2.t0 = normalizeLanguageList;
            _context2.next = 3;
            return _asyncToGenerator__default["default"]( /*#__PURE__*/_regeneratorRuntime__default["default"].mark(function _callee() {
              var r, value;
              return _regeneratorRuntime__default["default"].wrap(function _callee$(_context) {
                while (1) {
                  switch (_context.prev = _context.next) {
                    case 0:
                      if (!Array.isArray(langs)) {
                        _context.next = 2;
                        break;
                      }

                      return _context.abrupt("return", langs);

                    case 2:
                      _context.next = 4;
                      return getSanityClient().fetch(langs.query);

                    case 4:
                      r = _context.sent;
                      value = langs.value;

                      if (!(typeof value === 'string')) {
                        _context.next = 8;
                        break;
                      }

                      return _context.abrupt("return", r.map(function (l) {
                        return objectSafeGet(l, value);
                      }));

                    case 8:
                      return _context.abrupt("return", r.map(function (l) {
                        // @deprecated
                        if ('name' in value) {
                          return {
                            name: objectSafeGet(l, value.name),
                            title: objectSafeGet(l, value.title)
                          };
                        }

                        return {
                          id: objectSafeGet(l, value.id),
                          title: objectSafeGet(l, value.title)
                        };
                      }));

                    case 9:
                    case "end":
                      return _context.stop();
                  }
                }
              }, _callee);
            }))();

          case 3:
            _context2.t1 = _context2.sent;
            languages = (0, _context2.t0)(_context2.t1);

            if (!languagesLoaderFn__default["default"]) {
              _context2.next = 8;
              break;
            }

            possiblePromise = languagesLoaderFn__default["default"](languages, document);
            return _context2.abrupt("return", possiblePromise);

          case 8:
            return _context2.abrupt("return", languages);

          case 9:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2);
  }));

  return function getLanguagesFromOption(_x, _x2) {
    return _ref.apply(this, arguments);
  };
}();

var getBaseIdFromId = function getBaseIdFromId(id) {
  var nonDraftId = id.replace(/^drafts\./, ''); // subpath

  var rx = new RegExp("".concat(I18nPrefix, "\\.([^.]+)\\.[^.]+"));
  var match = nonDraftId.match(rx);
  if (match && match.length === 2) return match[1]; // delimiter

  var split = nonDraftId.split(I18nDelimiter);
  if (split.length > 0) return split[0];
  return nonDraftId;
};

var getTranslationsFor = /*#__PURE__*/function () {
  var _ref = _asyncToGenerator__default["default"]( /*#__PURE__*/_regeneratorRuntime__default["default"].mark(function _callee(baseDocumentId) {
    var includeDrafts,
        config,
        client,
        segments,
        _documents,
        documents,
        _args = arguments;

    return _regeneratorRuntime__default["default"].wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            includeDrafts = _args.length > 1 && _args[1] !== undefined ? _args[1] : false;
            config = getConfig();
            client = getSanityClient();

            if (!(config.idStructure === IdStructure.DELIMITER)) {
              _context.next = 10;
              break;
            }

            segments = baseDocumentId.split('-');
            segments[segments.length - 1] = "".concat(segments[segments.length - 1]).concat(I18nDelimiter, "*");
            _context.next = 8;
            return client.fetch(includeDrafts ? '*[_id match $segments]' : "*[_id match $segments && !(_id in path('drafts.**'))]", {
              segments: segments
            });

          case 8:
            _documents = _context.sent;
            return _context.abrupt("return", _documents ? _documents.filter(function (d) {
              return d._id.startsWith(baseDocumentId) || includeDrafts && d._id.startsWith("drafts.".concat(baseDocumentId));
            }) : []);

          case 10:
            _context.next = 12;
            return client.fetch(includeDrafts ? '*[_id in path($path) || _id in path($draftPath)]' : '*[_id in path($path)]', {
              path: buildDocId(baseDocumentId, '*'),
              draftPath: "drafts.".concat(buildDocId(baseDocumentId, '*'))
            });

          case 12:
            documents = _context.sent;
            return _context.abrupt("return", documents !== null && documents !== void 0 ? documents : []);

          case 14:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));

  return function getTranslationsFor(_x) {
    return _ref.apply(this, arguments);
  };
}();

function ownKeys$2(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread$2(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$2(Object(source), !0).forEach(function (key) { _defineProperty__default["default"](target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$2(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

function createSanityReference(id) {
  var weak = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
  return _objectSpread$2({
    _type: 'reference',
    _ref: id.replace("drafts.", "")
  }, weak === true ? {
    _weak: true
  } : {});
}

function getLanguageFromDocument(doc, config) {
  return (doc === null || doc === void 0 ? void 0 : doc[config.fieldNames.lang]) || config.base || null;
}

function ownKeys$1(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread$1(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$1(Object(source), !0).forEach(function (key) { _defineProperty__default["default"](target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
// can look up the existance of a base document on its own

function updateIntlFieldsForDocument(_x, _x2) {
  return _updateIntlFieldsForDocument.apply(this, arguments);
}

function _updateIntlFieldsForDocument() {
  _updateIntlFieldsForDocument = _asyncToGenerator__default["default"]( /*#__PURE__*/_regeneratorRuntime__default["default"].mark(function _callee(document, baseDocument) {
    var _getBaseLanguage;

    var type, id, schema, config, client, baseDocumentId, isTranslation, fieldName, refsFieldName, baseRefFieldName, langs, languageId, currentDocumentTransaction, translatedDocuments, baseDocumentTransaction, translatedRefs;
    return _regeneratorRuntime__default["default"].wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            type = document._type, id = document._id;
            schema = getSchema(type);
            config = getConfig(schema);
            client = getSanityClient();
            baseDocumentId = getBaseIdFromId(id);
            isTranslation = id !== baseDocumentId;
            fieldName = config.fieldNames.lang;
            refsFieldName = config.fieldNames.references;
            baseRefFieldName = config.fieldNames.baseReference;
            _context.next = 11;
            return getLanguagesFromOption(config.languages, document);

          case 11:
            langs = _context.sent;
            languageId = getLanguageFromDocument(document, config) || ((_getBaseLanguage = getBaseLanguage(langs, config.base)) === null || _getBaseLanguage === void 0 ? void 0 : _getBaseLanguage.id); // Update I18n field for current document

            currentDocumentTransaction = client.transaction();
            currentDocumentTransaction.createIfNotExists({
              _id: id,
              _type: type
            });
            currentDocumentTransaction.patch(id, {
              set: _objectSpread$1(_defineProperty__default["default"]({}, fieldName, languageId), isTranslation && config.referenceBehavior !== ReferenceBehavior.DISABLED ? _defineProperty__default["default"]({}, baseRefFieldName, createSanityReference(baseDocumentId, config.referenceBehavior === ReferenceBehavior.WEAK)) : {})
            });
            _context.next = 18;
            return currentDocumentTransaction.commit();

          case 18:
            if (!baseDocument) {
              _context.next = 29;
              break;
            }

            _context.next = 21;
            return getTranslationsFor(baseDocumentId);

          case 21:
            translatedDocuments = _context.sent;

            if (!(translatedDocuments.length > 0)) {
              _context.next = 29;
              break;
            }

            baseDocumentTransaction = client.transaction();
            translatedRefs = [];

            if (config.referenceBehavior !== ReferenceBehavior.DISABLED) {
              translatedRefs = ___default["default"].compact(translatedDocuments.map(function (doc) {
                var lang = getLanguageFromDocument(doc, config);
                if (!lang) return null;
                return _objectSpread$1({
                  _key: lang
                }, createSanityReference(doc._id, config.referenceBehavior === ReferenceBehavior.WEAK));
              }, {}));
            } // baseDocumentTransaction.createIfNotExists({_id: baseDocumentId, _type: type})


            baseDocumentTransaction.patch(baseDocumentId, {
              set: _defineProperty__default["default"]({}, refsFieldName, translatedRefs)
            });
            _context.next = 29;
            return baseDocumentTransaction.commit();

          case 29:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));
  return _updateIntlFieldsForDocument.apply(this, arguments);
}

function useDelayedFlag() {
  var value = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
  var timeout = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 500;
  var delayedOn = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
  var delayedOff = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;

  var _useState = React.useState(value),
      _useState2 = _slicedToArray__default["default"](_useState, 2),
      flag = _useState2[0],
      setFlag = _useState2[1];

  React.useEffect(function () {
    if (flag !== value) {
      if (value) {
        if (delayedOn) {
          var timeoutId = setTimeout(function () {
            return setFlag(true);
          }, timeout);
          return function () {
            return clearTimeout(timeoutId);
          };
        }

        setFlag(true);
      } else if (!value) {
        if (delayedOff) {
          var _timeoutId = setTimeout(function () {
            return setFlag(false);
          }, timeout);

          return function () {
            return clearTimeout(_timeoutId);
          };
        }

        setFlag(false);
      }
    }

    return undefined;
  }, [value, timeout, delayedOn, delayedOff]);
  return flag;
}

var PublishWithi18nAction = function PublishWithi18nAction(_ref) {
  var type = _ref.type,
      id = _ref.id,
      onComplete = _ref.onComplete;
  var toast = ui.useToast();
  var baseDocumentId = getBaseIdFromId(id);
  var updatingIntlFieldsPromiseRef = React__namespace.useRef(null);

  var _React$useState = React__namespace.useState(null),
      _React$useState2 = _slicedToArray__default["default"](_React$useState, 2),
      publishState = _React$useState2[0],
      setPublishState = _React$useState2[1];

  var _React$useState3 = React__namespace.useState(false),
      _React$useState4 = _slicedToArray__default["default"](_React$useState3, 2),
      updatingIntlFields = _React$useState4[0],
      setUpdatingIntlFields = _React$useState4[1];

  var _ref2 = reactHooks.useEditState(id, type),
      draft = _ref2.draft,
      published = _ref2.published;

  var baseDocumentEditState = reactHooks.useEditState(baseDocumentId, type);

  var _ref3 = reactHooks.useDocumentOperation(id, type),
      publish = _ref3.publish;

  var _useValidationStatus = reactHooks.useValidationStatus(id, type),
      isValidating = _useValidationStatus.isValidating,
      markers = _useValidationStatus.markers;

  var syncState = reactHooks.useSyncState(id, type);
  var baseDocumentSyncState = reactHooks.useSyncState(baseDocumentId, type);
  var disabled = useDelayedFlag(!!(publishState === 'published' || publishState === 'publishing' || updatingIntlFields || publish.disabled || syncState.isSyncing || baseDocumentSyncState.isSyncing || isValidating || markers.some(function (marker) {
    return marker.level === 'error';
  })));
  var label = React__namespace.useMemo(function () {
    if (publishState === 'publishing') return UiMessages.publishing;
    if (updatingIntlFields) return UiMessages.updatingIntlFields;
    return UiMessages.publish;
  }, [publishState, updatingIntlFields]);
  var doUpdateIntlFields = React__namespace.useCallback( /*#__PURE__*/_asyncToGenerator__default["default"]( /*#__PURE__*/_regeneratorRuntime__default["default"].mark(function _callee() {
    var document;
    return _regeneratorRuntime__default["default"].wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            setUpdatingIntlFields(true);
            _context.prev = 1;
            document = draft || published;

            if (!document) {
              _context.next = 6;
              break;
            }

            _context.next = 6;
            return updateIntlFieldsForDocument(document, baseDocumentEditState.published);

          case 6:
            toast.push({
              closable: true,
              status: 'success',
              title: UiMessages.intlFieldsUpdated
            });
            _context.next = 13;
            break;

          case 9:
            _context.prev = 9;
            _context.t0 = _context["catch"](1);
            console.error(_context.t0);
            toast.push({
              closable: true,
              status: 'error',
              title: _context.t0.toString()
            });

          case 13:
            setUpdatingIntlFields(false);

          case 14:
          case "end":
            return _context.stop();
        }
      }
    }, _callee, null, [[1, 9]]);
  })), [toast, draft, published, baseDocumentEditState.published]);
  var onHandle = React__namespace.useCallback(function () {
    setPublishState('publishing');
    var schema = getSchema(type);
    var config = getConfig(schema);
    var isTranslation = id !== baseDocumentId;

    if (isTranslation && !baseDocumentEditState.published && config.referenceBehavior === ReferenceBehavior.STRONG) {
      throw new Error(UiMessages.errors.baseDocumentNotPublished);
    } else {
      publish.execute();
    }
  }, [id, baseDocumentId, type, publish, baseDocumentEditState.published]);
  React__namespace.useEffect(function () {
    var didPublish = publishState === 'publishing' && !draft;
    var nextState = didPublish ? 'published' : null;
    var delay = didPublish ? 200 : 4000;
    var timer = setTimeout(function () {
      setPublishState(nextState);
    }, delay);
    return function () {
      return clearTimeout(timer);
    };
  }, [publishState, draft]);
  React__namespace.useEffect(function () {
    if (publishState === 'published') {
      if (!updatingIntlFieldsPromiseRef.current) {
        updatingIntlFieldsPromiseRef.current = doUpdateIntlFields().then(function () {
          return onComplete && onComplete();
        })["finally"](function () {
          return updatingIntlFieldsPromiseRef.current = null;
        });
      }
    }
  }, [publishState, onComplete, doUpdateIntlFields]);
  return {
    disabled: disabled,
    label: label,
    icon: publishState === 'published' ? icons.CheckmarkIcon : icons.PublishIcon,
    shortcut: disabled ? null : 'Ctrl+Alt+P',
    onHandle: onHandle
  };
};

/**
 * This code is mostly taken from the defualt DeleteAction provided by Sanity
 */

var DISABLED_REASON_TITLE$1 = {
  NOTHING_TO_DELETE: "This document doesn't yet exist or is already deleted"
};
var DeleteWithi18nAction = function DeleteWithi18nAction(_ref) {
  var id = _ref.id,
      type = _ref.type,
      onComplete = _ref.onComplete;
  var toast = ui.useToast();
  var config = React__default["default"].useMemo(function () {
    return getConfig(type);
  }, [type]);
  var baseDocumentId = React__default["default"].useMemo(function () {
    return getBaseIdFromId(id);
  }, [id]);
  var baseDocumentEditState = reactHooks.useEditState(baseDocumentId, type);
  var syncState = reactHooks.useSyncState(id, type);
  var baseDocumentSyncState = reactHooks.useSyncState(baseDocumentId, type);

  var _ref2 = reactHooks.useDocumentOperation(id, type),
      deleteOp = _ref2["delete"];

  var _React$useState = React__default["default"].useState(false),
      _React$useState2 = _slicedToArray__default["default"](_React$useState, 2),
      isDeleting = _React$useState2[0],
      setIsDeleting = _React$useState2[1];

  var _React$useState3 = React__default["default"].useState(false),
      _React$useState4 = _slicedToArray__default["default"](_React$useState3, 2),
      isConfirmDialogOpen = _React$useState4[0],
      setConfirmDialogOpen = _React$useState4[1];

  var onHandle = React__default["default"].useCallback(function () {
    setConfirmDialogOpen(true);
  }, []);
  var onDialogCancel = React__default["default"].useCallback(function () {
    setConfirmDialogOpen(false);
    if (onComplete) onComplete();
  }, [onComplete]);
  var onDialogConfirm = React__default["default"].useCallback( /*#__PURE__*/_asyncToGenerator__default["default"]( /*#__PURE__*/_regeneratorRuntime__default["default"].mark(function _callee() {
    var client, baseTransaction, translatedDocuments, translationsTransaction;
    return _regeneratorRuntime__default["default"].wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            _context.prev = 0;
            setIsDeleting(true);
            setConfirmDialogOpen(false);
            client = getSanityClient();

            if (!(baseDocumentEditState.draft || baseDocumentEditState.published)) {
              _context.next = 10;
              break;
            }

            baseTransaction = client.transaction();

            if (baseDocumentEditState.draft) {
              baseTransaction["delete"]("drafts.".concat(baseDocumentId));
            }

            if (baseDocumentEditState.published) {
              baseTransaction.patch(baseDocumentId, {
                unset: [config.fieldNames.references]
              });
            }

            _context.next = 10;
            return baseTransaction.commit();

          case 10:
            _context.next = 12;
            return getTranslationsFor(baseDocumentId, true);

          case 12:
            translatedDocuments = _context.sent;
            translationsTransaction = client.transaction();
            translatedDocuments.forEach(function (doc) {
              translationsTransaction["delete"](doc._id);
            });
            _context.next = 17;
            return translationsTransaction.commit();

          case 17:
            deleteOp.execute();
            if (onComplete) onComplete();
            _context.next = 24;
            break;

          case 21:
            _context.prev = 21;
            _context.t0 = _context["catch"](0);
            toast.push({
              closable: true,
              status: 'error',
              title: _context.t0.toString()
            });

          case 24:
            _context.prev = 24;
            setIsDeleting(true);
            return _context.finish(24);

          case 27:
          case "end":
            return _context.stop();
        }
      }
    }, _callee, null, [[0, 21, 24, 27]]);
  })), [toast, baseDocumentId, baseDocumentEditState.draft, baseDocumentEditState.published, deleteOp, onComplete, config.fieldNames.references]);
  var dialogContent = React__default["default"].useMemo(function () {
    if (isConfirmDialogOpen) {
      return /*#__PURE__*/React__default["default"].createElement(ConfirmDeleteDialog.ConfirmDeleteDialog, {
        action: "delete",
        id: id,
        type: type,
        onCancel: onDialogCancel,
        onConfirm: onDialogConfirm
      });
    }

    return null;
  }, [id, type, isConfirmDialogOpen, onDialogCancel, onDialogConfirm]);
  return {
    onHandle: onHandle,
    color: 'danger',
    icon: TrashIcon__default["default"],
    disabled: isDeleting || Boolean(deleteOp.disabled) || syncState.isSyncing || baseDocumentSyncState.isSyncing,
    shortcut: 'CTRL+ALT+D',
    title: deleteOp.disabled && DISABLED_REASON_TITLE$1[deleteOp.disabled] || '',
    label: isDeleting ? UiMessages.deleteAll.deleting : UiMessages.deleteAll.buttonTitle,
    dialog: isConfirmDialogOpen && {
      type: 'legacy',
      onClose: onComplete,
      title: 'Delete',
      content: dialogContent
    }
  };
};

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty__default["default"](target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
/**
 * This code is mostly taken from the default DuplicateAction provided by Sanity
 */

var DISABLED_REASON_TITLE = {
  NOTHING_TO_DUPLICATE: "This document doesn't yet exist so there's nothing to duplicate"
};
var DuplicateWithi18nAction = function DuplicateWithi18nAction(_ref) {
  var id = _ref.id,
      type = _ref.type,
      draft = _ref.draft,
      published = _ref.published;
  var toast = ui.useToast();
  var config = React__default["default"].useMemo(function () {
    return getConfig(type);
  }, [type]);
  var client = getSanityClient();
  var baseDocumentId = getBaseIdFromId(id);

  var _ref2 = reactHooks.useDocumentOperation(id, type),
      duplicateOp = _ref2.duplicate;

  var _React$useState = React__default["default"].useState(false),
      _React$useState2 = _slicedToArray__default["default"](_React$useState, 2),
      isDuplicating = _React$useState2[0],
      setDuplicating = _React$useState2[1];

  var onDuplicate = React__default["default"].useCallback( /*#__PURE__*/_asyncToGenerator__default["default"]( /*#__PURE__*/_regeneratorRuntime__default["default"].mark(function _callee() {
    var dupeId, translations, transaction;
    return _regeneratorRuntime__default["default"].wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            setDuplicating(true);
            _context.prev = 1;
            dupeId = uuid.uuid();
            _context.next = 5;
            return getTranslationsFor(baseDocumentId);

          case 5:
            translations = _context.sent;
            transaction = client.transaction();
            transaction.create(_objectSpread(_objectSpread({}, draft !== null && draft !== void 0 ? draft : published), {}, {
              _id: dupeId,
              _type: type
            }));
            translations.forEach(function (t) {
              var isDraft = t._id.startsWith('drafts.');

              var newId = buildDocId(dupeId, getLanguageFromDocument(t, config));
              transaction.create(_objectSpread(_objectSpread({}, t), {}, {
                _id: isDraft ? "drafts.".concat(newId) : newId
              }));
            });
            _context.next = 11;
            return transaction.commit();

          case 11:
            _context.next = 17;
            break;

          case 13:
            _context.prev = 13;
            _context.t0 = _context["catch"](1);
            console.error(_context.t0);
            toast.push(_context.t0.message);

          case 17:
            setDuplicating(false);

          case 18:
          case "end":
            return _context.stop();
        }
      }
    }, _callee, null, [[1, 13]]);
  })), [client, toast, config, baseDocumentId, type, draft, published]);
  return {
    icon: ContentCopyIcon__default["default"],
    disabled: Boolean(duplicateOp.disabled) || isDuplicating,
    title: duplicateOp.disabled && DISABLED_REASON_TITLE[duplicateOp.disabled] || '',
    label: isDuplicating ? UiMessages.duplicateAll.duplicating : UiMessages.duplicateAll.buttonTitle,
    onHandle: onDuplicate
  };
};

var index = (function (props) {
  var schema = getSchema(props.type);
  var isI18n = schema && schema.i18n;
  var isBase = props.id == getBaseIdFromId(props.id);
  var actions = defaultResolve__default["default"](props);

  if (isI18n) {
    actions = actions.map(function (Action) {
      var isPublishAction = Action === defaultResolve.PublishAction;
      var isDeleteAction = Action === defaultResolve.DeleteAction; // replace default publish actions with i18n publish actions

      if (isPublishAction) {
        return PublishWithi18nAction;
      } // replace base delete action with delete with i18n action


      if (isDeleteAction && isBase) {
        return DeleteWithi18nAction;
      }

      return Action;
    }); // push duplicate action

    if (isBase) {
      actions.push(DuplicateWithi18nAction);
    }
  }

  return actions;
});

exports.DeleteWithi18nAction = DeleteWithi18nAction;
exports.DuplicateWithi18nAction = DuplicateWithi18nAction;
exports.PublishWithi18nAction = PublishWithi18nAction;
exports["default"] = index;
//# sourceMappingURL=index.js.map
