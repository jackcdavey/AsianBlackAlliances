'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var config = require('config:@sanity/document-internationalization');
var schemas = require('part:@sanity/base/schema');
var client = require('part:@sanity/base/client');
var _asyncToGenerator = require('@babel/runtime/helpers/asyncToGenerator');
var _regeneratorRuntime = require('@babel/runtime/regenerator');
var languagesLoaderFn = require('part:@sanity/document-internationalization/languages/loader?');
var _defineProperty = require('@babel/runtime/helpers/defineProperty');
var _ = require('lodash');
var types = require('@sanity/types');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var config__default = /*#__PURE__*/_interopDefaultLegacy(config);
var schemas__default = /*#__PURE__*/_interopDefaultLegacy(schemas);
var client__default = /*#__PURE__*/_interopDefaultLegacy(client);
var _asyncToGenerator__default = /*#__PURE__*/_interopDefaultLegacy(_asyncToGenerator);
var _regeneratorRuntime__default = /*#__PURE__*/_interopDefaultLegacy(_regeneratorRuntime);
var languagesLoaderFn__default = /*#__PURE__*/_interopDefaultLegacy(languagesLoaderFn);
var _defineProperty__default = /*#__PURE__*/_interopDefaultLegacy(_defineProperty);
var ___default = /*#__PURE__*/_interopDefaultLegacy(_);

var LanguageCultures = [{
  value: 'af',
  title: 'Afrikaans'
}, {
  value: 'af-ZA',
  title: 'Afrikaans (South Africa)'
}, {
  value: 'ar',
  title: 'Arabic'
}, {
  value: 'ar-AE',
  title: 'Arabic (U.A.E.)'
}, {
  value: 'ar-BH',
  title: 'Arabic (Bahrain)'
}, {
  value: 'ar-DZ',
  title: 'Arabic (Algeria)'
}, {
  value: 'ar-EG',
  title: 'Arabic (Egypt)'
}, {
  value: 'ar-IQ',
  title: 'Arabic (Iraq)'
}, {
  value: 'ar-JO',
  title: 'Arabic (Jordan)'
}, {
  value: 'ar-KW',
  title: 'Arabic (Kuwait)'
}, {
  value: 'ar-LB',
  title: 'Arabic (Lebanon)'
}, {
  value: 'ar-LY',
  title: 'Arabic (Libya)'
}, {
  value: 'ar-MA',
  title: 'Arabic (Morocco)'
}, {
  value: 'ar-OM',
  title: 'Arabic (Oman)'
}, {
  value: 'ar-QA',
  title: 'Arabic (Qatar)'
}, {
  value: 'ar-SA',
  title: 'Arabic (Saudi Arabia)'
}, {
  value: 'ar-SY',
  title: 'Arabic (Syria)'
}, {
  value: 'ar-TN',
  title: 'Arabic (Tunisia)'
}, {
  value: 'ar-YE',
  title: 'Arabic (Yemen)'
}, {
  value: 'az',
  title: 'Azeri'
}, {
  value: 'az-Cyrl-AZ',
  title: 'Azeri (Cyrillic, Azerbaijan)'
}, {
  value: 'az-Latn-AZ',
  title: 'Azeri (Latin, Azerbaijan)'
}, {
  value: 'be',
  title: 'Belarusian'
}, {
  value: 'be-BY',
  title: 'Belarusian (Belarus)'
}, {
  value: 'bg',
  title: 'Bulgarian'
}, {
  value: 'bg-BG',
  title: 'Bulgarian (Bulgaria)'
}, {
  value: 'bs-Latn-BA',
  title: 'Bosnian (Bosnia and Herzegovina)'
}, {
  value: 'ca',
  title: 'Catalan'
}, {
  value: 'ca-ES',
  title: 'Catalan (Catalan)'
}, {
  value: 'cs',
  title: 'Czech'
}, {
  value: 'cs-CZ',
  title: 'Czech (Czech Republic)'
}, {
  value: 'cy-GB',
  title: 'Welsh (United Kingdom)'
}, {
  value: 'da',
  title: 'Danish'
}, {
  value: 'da-DK',
  title: 'Danish (Denmark)'
}, {
  value: 'de',
  title: 'German'
}, {
  value: 'de-AT',
  title: 'German (Austria)'
}, {
  value: 'de-DE',
  title: 'German (Germany)'
}, {
  value: 'de-CH',
  title: 'German (Switzerland)'
}, {
  value: 'de-LI',
  title: 'German (Liechtenstein)'
}, {
  value: 'de-LU',
  title: 'German (Luxembourg)'
}, {
  value: 'dv',
  title: 'Divehi'
}, {
  value: 'dv-MV',
  title: 'Divehi (Maldives)'
}, {
  value: 'el',
  title: 'Greek'
}, {
  value: 'el-GR',
  title: 'Greek (Greece)'
}, {
  value: 'en',
  title: 'English'
}, {
  value: 'en-029',
  title: 'English (Caribbean)'
}, {
  value: 'en-AU',
  title: 'English (Australia)'
}, {
  value: 'en-BZ',
  title: 'English (Belize)'
}, {
  value: 'en-CA',
  title: 'English (Canada)'
}, {
  value: 'en-GB',
  title: 'English (United Kingdom)'
}, {
  value: 'en-IE',
  title: 'English (Ireland)'
}, {
  value: 'en-JM',
  title: 'English (Jamaica)'
}, {
  value: 'en-NZ',
  title: 'English (New Zealand)'
}, {
  value: 'en-PH',
  title: 'English (Republic of the Philippines)'
}, {
  value: 'en-TT',
  title: 'English (Trinidad and Tobago)'
}, {
  value: 'en-US',
  title: 'English (United States)'
}, {
  value: 'en-ZA',
  title: 'English (South Africa)'
}, {
  value: 'en-ZW',
  title: 'English (Zimbabwe)'
}, {
  value: 'es',
  title: 'Spanish'
}, {
  value: 'es-AR',
  title: 'Spanish (Argentina)'
}, {
  value: 'es-BO',
  title: 'Spanish (Bolivia)'
}, {
  value: 'es-CL',
  title: 'Spanish (Chile)'
}, {
  value: 'es-CO',
  title: 'Spanish (Colombia)'
}, {
  value: 'es-CR',
  title: 'Spanish (Costa Rica)'
}, {
  value: 'es-DO',
  title: 'Spanish (Dominican Republic)'
}, {
  value: 'es-EC',
  title: 'Spanish (Ecuador)'
}, {
  value: 'es-ES',
  title: 'Spanish (Spain)'
}, {
  value: 'es-GT',
  title: 'Spanish (Guatemala)'
}, {
  value: 'es-HN',
  title: 'Spanish (Honduras)'
}, {
  value: 'es-MX',
  title: 'Spanish (Mexico)'
}, {
  value: 'es-NI',
  title: 'Spanish (Nicaragua)'
}, {
  value: 'es-PA',
  title: 'Spanish (Panama)'
}, {
  value: 'es-PE',
  title: 'Spanish (Peru)'
}, {
  value: 'es-PR',
  title: 'Spanish (Puerto Rico)'
}, {
  value: 'es-PY',
  title: 'Spanish (Paraguay)'
}, {
  value: 'es-SV',
  title: 'Spanish (El Salvador)'
}, {
  value: 'es-UY',
  title: 'Spanish (Uruguay)'
}, {
  value: 'es-VE',
  title: 'Spanish (Venezuela)'
}, {
  value: 'et',
  title: 'Estonian'
}, {
  value: 'et-EE',
  title: 'Estonian (Estonia)'
}, {
  value: 'eu',
  title: 'Basque'
}, {
  value: 'eu-ES',
  title: 'Basque (Basque)'
}, {
  value: 'fa',
  title: 'Persian'
}, {
  value: 'fa-IR',
  title: 'Persian (Iran)'
}, {
  value: 'fi',
  title: 'Finnish'
}, {
  value: 'fi-FI',
  title: 'Finnish (Finland)'
}, {
  value: 'fo',
  title: 'Faroese'
}, {
  value: 'fo-FO',
  title: 'Faroese (Faroe Islands)'
}, {
  value: 'fr',
  title: 'French'
}, {
  value: 'fr-BE',
  title: 'French (Belgium)'
}, {
  value: 'fr-CA',
  title: 'French (Canada)'
}, {
  value: 'fr-FR',
  title: 'French (France)'
}, {
  value: 'fr-CH',
  title: 'French (Switzerland)'
}, {
  value: 'fr-LU',
  title: 'French (Luxembourg)'
}, {
  value: 'fr-MC',
  title: 'French (Principality of Monaco)'
}, {
  value: 'gl',
  title: 'Galician'
}, {
  value: 'gl-ES',
  title: 'Galician (Galician)'
}, {
  value: 'gu',
  title: 'Gujarati'
}, {
  value: 'gu-IN',
  title: 'Gujarati (India)'
}, {
  value: 'he',
  title: 'Hebrew'
}, {
  value: 'he-IL',
  title: 'Hebrew (Israel)'
}, {
  value: 'hi',
  title: 'Hindi'
}, {
  value: 'hi-IN',
  title: 'Hindi (India)'
}, {
  value: 'hr',
  title: 'Croatian'
}, {
  value: 'hr-BA',
  title: 'Croatian (Bosnia and Herzegovina)'
}, {
  value: 'hr-HR',
  title: 'Croatian (Croatia)'
}, {
  value: 'hu',
  title: 'Hungarian'
}, {
  value: 'hu-HU',
  title: 'Hungarian (Hungary)'
}, {
  value: 'hy',
  title: 'Armenian'
}, {
  value: 'hy-AM',
  title: 'Armenian (Armenia)'
}, {
  value: 'id',
  title: 'Indonesian'
}, {
  value: 'id-ID',
  title: 'Indonesian (Indonesia)'
}, {
  value: 'is',
  title: 'Icelandic'
}, {
  value: 'is-IS',
  title: 'Icelandic (Iceland)'
}, {
  value: 'it',
  title: 'Italian'
}, {
  value: 'it-CH',
  title: 'Italian (Switzerland)'
}, {
  value: 'it-IT',
  title: 'Italian (Italy)'
}, {
  value: 'ja',
  title: 'Japanese'
}, {
  value: 'ja-JP',
  title: 'Japanese (Japan)'
}, {
  value: 'ka',
  title: 'Georgian'
}, {
  value: 'ka-GE',
  title: 'Georgian (Georgia)'
}, {
  value: 'kk',
  title: 'Kazakh'
}, {
  value: 'kk-KZ',
  title: 'Kazakh (Kazakhstan)'
}, {
  value: 'kn',
  title: 'Kannada'
}, {
  value: 'kn-IN',
  title: 'Kannada (India)'
}, {
  value: 'ko',
  title: 'Korean'
}, {
  value: 'kok',
  title: 'Konkani'
}, {
  value: 'kok-IN',
  title: 'Konkani (India)'
}, {
  value: 'ko-KR',
  title: 'Korean (Korea)'
}, {
  value: 'ky',
  title: 'Kyrgyz'
}, {
  value: 'ky-KG',
  title: 'Kyrgyz (Kyrgyzstan)'
}, {
  value: 'lt',
  title: 'Lithuanian'
}, {
  value: 'lt-LT',
  title: 'Lithuanian (Lithuania)'
}, {
  value: 'lv',
  title: 'Latvian'
}, {
  value: 'lv-LV',
  title: 'Latvian (Latvia)'
}, {
  value: 'mi-NZ',
  title: 'Maori (New Zealand)'
}, {
  value: 'mk',
  title: 'Macedonian'
}, {
  value: 'mk-MK',
  title: 'Macedonian (Former Yugoslav Republic of Macedonia)'
}, {
  value: 'mn',
  title: 'Mongolian'
}, {
  value: 'mn-MN',
  title: 'Mongolian (Cyrillic, Mongolia)'
}, {
  value: 'mr',
  title: 'Marathi'
}, {
  value: 'mr-IN',
  title: 'Marathi (India)'
}, {
  value: 'ms',
  title: 'Malay'
}, {
  value: 'ms-BN',
  title: 'Malay (Brunei Darussalam)'
}, {
  value: 'ms-MY',
  title: 'Malay (Malaysia)'
}, {
  value: 'mt-MT',
  title: 'Maltese (Malta)'
}, {
  value: 'nb-NO',
  title: 'Norwegian, Bokmal (Norway)'
}, {
  value: 'nl',
  title: 'Dutch'
}, {
  value: 'nl-BE',
  title: 'Dutch (Belgium)'
}, {
  value: 'nl-NL',
  title: 'Dutch (Netherlands)'
}, {
  value: 'nn-NO',
  title: 'Norwegian, Nynorsk (Norway)'
}, {
  value: 'no',
  title: 'Norwegian'
}, {
  value: 'ns-ZA',
  title: 'Northern Sotho (South Africa)'
}, {
  value: 'pa',
  title: 'Punjabi'
}, {
  value: 'pa-IN',
  title: 'Punjabi (India)'
}, {
  value: 'pl',
  title: 'Polish'
}, {
  value: 'pl-PL',
  title: 'Polish (Poland)'
}, {
  value: 'pt',
  title: 'Portuguese'
}, {
  value: 'pt-BR',
  title: 'Portuguese (Brazil)'
}, {
  value: 'pt-PT',
  title: 'Portuguese (Portugal)'
}, {
  value: 'quz-BO',
  title: 'Quechua (Bolivia)'
}, {
  value: 'quz-EC',
  title: 'Quechua (Ecuador)'
}, {
  value: 'quz-PE',
  title: 'Quechua (Peru)'
}, {
  value: 'ro',
  title: 'Romanian'
}, {
  value: 'ro-RO',
  title: 'Romanian (Romania)'
}, {
  value: 'ru',
  title: 'Russian'
}, {
  value: 'ru-RU',
  title: 'Russian (Russia)'
}, {
  value: 'sa',
  title: 'Sanskrit'
}, {
  value: 'sa-IN',
  title: 'Sanskrit (India)'
}, {
  value: 'se-FI',
  title: 'Sami (Northern) (Finland)'
}, {
  value: 'se-NO',
  title: 'Sami (Northern) (Norway)'
}, {
  value: 'se-SE',
  title: 'Sami (Northern) (Sweden)'
}, {
  value: 'sk',
  title: 'Slovak'
}, {
  value: 'sk-SK',
  title: 'Slovak (Slovakia)'
}, {
  value: 'sl',
  title: 'Slovenian'
}, {
  value: 'sl-SI',
  title: 'Slovenian (Slovenia)'
}, {
  value: 'sma-NO',
  title: 'Sami (Southern) (Norway)'
}, {
  value: 'sma-SE',
  title: 'Sami (Southern) (Sweden)'
}, {
  value: 'smj-NO',
  title: 'Sami (Lule) (Norway)'
}, {
  value: 'smj-SE',
  title: 'Sami (Lule) (Sweden)'
}, {
  value: 'smn-FI',
  title: 'Sami (Inari) (Finland)'
}, {
  value: 'sms-FI',
  title: 'Sami (Skolt) (Finland)'
}, {
  value: 'sq',
  title: 'Albanian'
}, {
  value: 'sq-AL',
  title: 'Albanian (Albania)'
}, {
  value: 'sr',
  title: 'Serbian'
}, {
  value: 'sr-Cyrl-BA',
  title: 'Serbian (Cyrillic) (Bosnia and Herzegovina)'
}, {
  value: 'sr-Cyrl-CS',
  title: 'Serbian (Cyrillic, Serbia)'
}, {
  value: 'sr-Latn-BA',
  title: 'Serbian (Latin) (Bosnia and Herzegovina)'
}, {
  value: 'sr-Latn-CS',
  title: 'Serbian (Latin, Serbia)'
}, {
  value: 'sv',
  title: 'Swedish'
}, {
  value: 'sv-FI',
  title: 'Swedish (Finland)'
}, {
  value: 'sv-SE',
  title: 'Swedish (Sweden)'
}, {
  value: 'sw',
  title: 'Kiswahili'
}, {
  value: 'sw-KE',
  title: 'Kiswahili (Kenya)'
}, {
  value: 'syr',
  title: 'Syriac'
}, {
  value: 'syr-SY',
  title: 'Syriac (Syria)'
}, {
  value: 'ta',
  title: 'Tamil'
}, {
  value: 'ta-IN',
  title: 'Tamil (India)'
}, {
  value: 'te',
  title: 'Telugu'
}, {
  value: 'te-IN',
  title: 'Telugu (India)'
}, {
  value: 'th',
  title: 'Thai'
}, {
  value: 'th-TH',
  title: 'Thai (Thailand)'
}, {
  value: 'tn-ZA',
  title: 'Tswana (South Africa)'
}, {
  value: 'tr',
  title: 'Turkish'
}, {
  value: 'tr-TR',
  title: 'Turkish (Turkey)'
}, {
  value: 'tt',
  title: 'Tatar'
}, {
  value: 'tt-RU',
  title: 'Tatar (Russia)'
}, {
  value: 'uk',
  title: 'Ukrainian'
}, {
  value: 'uk-UA',
  title: 'Ukrainian (Ukraine)'
}, {
  value: 'ur',
  title: 'Urdu'
}, {
  value: 'ur-PK',
  title: 'Urdu (Islamic Republic of Pakistan)'
}, {
  value: 'uz',
  title: 'Uzbek'
}, {
  value: 'uz-Cyrl-UZ',
  title: 'Uzbek (Cyrillic, Uzbekistan)'
}, {
  value: 'uz-Latn-UZ',
  title: 'Uzbek (Latin, Uzbekistan)'
}, {
  value: 'vi',
  title: 'Vietnamese'
}, {
  value: 'vi-VN',
  title: 'Vietnamese (Vietnam)'
}, {
  value: 'xh-ZA',
  title: 'Xhosa (South Africa)'
}, {
  value: 'zh-CN',
  title: "Chinese (People's Republic of China)"
}, {
  value: 'zh-HK',
  title: 'Chinese (Hong Kong S.A.R.)'
}, {
  value: 'zh-CHS',
  title: 'Chinese (Simplified)'
}, {
  value: 'zh-CHT',
  title: 'Chinese (Traditional)'
}, {
  value: 'zh-MO',
  title: 'Chinese (Macao S.A.R.)'
}, {
  value: 'zh-SG',
  title: 'Chinese (Singapore)'
}, {
  value: 'zh-TW',
  title: 'Chinese (Taiwan)'
}, {
  value: 'zu-ZA',
  title: 'Zulu (South Africa)'
}];

var I18nPrefix = 'i18n';

var I18nDelimiter = '__i18n_';

var ReferenceBehavior;

(function (ReferenceBehavior) {
  ReferenceBehavior["STRONG"] = "strong";
  ReferenceBehavior["WEAK"] = "weak";
  ReferenceBehavior["DISABLED"] = "disabled";
})(ReferenceBehavior || (ReferenceBehavior = {}));

var IdStructure;

(function (IdStructure) {
  IdStructure["SUBPATH"] = "subpath";
  IdStructure["DELIMITER"] = "delimiter";
})(IdStructure || (IdStructure = {}));

var getSchema = function getSchema(name) {
  return schemas__default["default"]._original.types.find(function (s) {
    return s.name === name;
  });
};

var getI18nConfigFromType = function getI18nConfigFromType(type) {
  var i18nconfig = {};

  if (type) {
    if (typeof type === 'string') {
      var schema = getSchema(type);

      if (schema && typeof schema.i18n !== 'boolean') {
        i18nconfig = schema.i18n;
      }
    } else if (typeof type.i18n !== 'boolean') {
      i18nconfig = type.i18n;
    }
  }

  return i18nconfig;
};

function getConfig(type) {
  var _schemaConfig$fieldNa, _cfg$fieldNames, _schemaConfig$fieldNa2, _cfg$fieldNames2, _schemaConfig$fieldNa3, _cfg$fieldNames3;

  var schemaConfig = getI18nConfigFromType(type);
  var cfg = config__default["default"];
  return {
    base: (schemaConfig === null || schemaConfig === void 0 ? void 0 : schemaConfig.base) || (cfg === null || cfg === void 0 ? void 0 : cfg.base) || '',
    idStructure: cfg.idStructure || IdStructure.DELIMITER,
    referenceBehavior: cfg.referenceBehavior || ReferenceBehavior.STRONG,
    withTranslationsMaintenance: (cfg === null || cfg === void 0 ? void 0 : cfg.withTranslationsMaintenance) === true,
    fieldNames: {
      lang: (schemaConfig === null || schemaConfig === void 0 ? void 0 : (_schemaConfig$fieldNa = schemaConfig.fieldNames) === null || _schemaConfig$fieldNa === void 0 ? void 0 : _schemaConfig$fieldNa.lang) || (cfg === null || cfg === void 0 ? void 0 : (_cfg$fieldNames = cfg.fieldNames) === null || _cfg$fieldNames === void 0 ? void 0 : _cfg$fieldNames.lang) || '__i18n_lang',
      references: (schemaConfig === null || schemaConfig === void 0 ? void 0 : (_schemaConfig$fieldNa2 = schemaConfig.fieldNames) === null || _schemaConfig$fieldNa2 === void 0 ? void 0 : _schemaConfig$fieldNa2.references) || (cfg === null || cfg === void 0 ? void 0 : (_cfg$fieldNames2 = cfg.fieldNames) === null || _cfg$fieldNames2 === void 0 ? void 0 : _cfg$fieldNames2.references) || '__i18n_refs',
      baseReference: (schemaConfig === null || schemaConfig === void 0 ? void 0 : (_schemaConfig$fieldNa3 = schemaConfig.fieldNames) === null || _schemaConfig$fieldNa3 === void 0 ? void 0 : _schemaConfig$fieldNa3.baseReference) || (cfg === null || cfg === void 0 ? void 0 : (_cfg$fieldNames3 = cfg.fieldNames) === null || _cfg$fieldNames3 === void 0 ? void 0 : _cfg$fieldNames3.baseReference) || '__i18n_base'
    },
    languages: (schemaConfig === null || schemaConfig === void 0 ? void 0 : schemaConfig.languages) || (cfg === null || cfg === void 0 ? void 0 : cfg.languages) || []
  };
}

var buildDocId = function buildDocId(id, lang) {
  var config = getConfig();
  if (config.idStructure === IdStructure.DELIMITER) return "".concat(id).concat(I18nDelimiter).concat(lang || '*');
  return "".concat(I18nPrefix, ".").concat(id, ".").concat(lang || '*');
};

var normalizeLanguageList = function normalizeLanguageList(languages) {
  return languages.map(function (l) {
    if (typeof l === 'string') {
      var langCult = LanguageCultures.find(function (x) {
        return x.value === l;
      });
      if (langCult) return {
        title: langCult.title,
        id: l
      };
      return {
        title: l,
        id: l
      };
    }

    if ('name' in l) {
      console.warn("The \"name\" field in your language configuration is deprecated, please replace it with \"id\".");
      return {
        title: l.title,
        id: l.name
      };
    }

    return {
      title: l.title,
      id: l.id
    };
  });
};

var getBaseLanguage = function getBaseLanguage(langs, base) {
  if (base) return langs.find(function (l) {
    return l.id === base;
  }) || null;
  return langs.length > 0 ? langs[0] : null;
};

var getSanityClient = function getSanityClient() {
  return client__default["default"].withConfig({
    apiVersion: "2021-10-01"
  });
};

var objectSafeGet = get;

/*
  const obj = {a: {aa: {aaa: 2}}, b: 4};

  get(obj, 'a.aa.aaa'); // 2
  get(obj, ['a', 'aa', 'aaa']); // 2

  get(obj, 'b.bb.bbb'); // undefined
  get(obj, ['b', 'bb', 'bbb']); // undefined

  get(obj.a, 'aa.aaa'); // 2
  get(obj.a, ['aa', 'aaa']); // 2

  get(obj.b, 'bb.bbb'); // undefined
  get(obj.b, ['bb', 'bbb']); // undefined

  get(obj.b, 'bb.bbb', 42); // 42
  get(obj.b, ['bb', 'bbb'], 42); // 42

  get(null, 'a'); // undefined
  get(undefined, ['a']); // undefined

  get(null, 'a', 42); // 42
  get(undefined, ['a'], 42); // 42

  const obj = {a: {}};
  const sym = Symbol();
  obj.a[sym] = 4;
  get(obj.a, sym); // 4
*/

function get(obj, propsArg, defaultValue) {
  if (!obj) {
    return defaultValue;
  }
  var props, prop;
  if (Array.isArray(propsArg)) {
    props = propsArg.slice(0);
  }
  if (typeof propsArg == 'string') {
    props = propsArg.split('.');
  }
  if (typeof propsArg == 'symbol') {
    props = [propsArg];
  }
  if (!Array.isArray(props)) {
    throw new Error('props arg must be an array, a string or a symbol');
  }
  while (props.length) {
    prop = props.shift();
    if (!obj) {
      return defaultValue;
    }
    obj = obj[prop];
    if (obj === undefined) {
      return defaultValue;
    }
  }
  return obj;
}

var getLanguagesFromOption = /*#__PURE__*/function () {
  var _ref = _asyncToGenerator__default["default"]( /*#__PURE__*/_regeneratorRuntime__default["default"].mark(function _callee2(langs, document) {
    var languages, possiblePromise;
    return _regeneratorRuntime__default["default"].wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            _context2.t0 = normalizeLanguageList;
            _context2.next = 3;
            return _asyncToGenerator__default["default"]( /*#__PURE__*/_regeneratorRuntime__default["default"].mark(function _callee() {
              var r, value;
              return _regeneratorRuntime__default["default"].wrap(function _callee$(_context) {
                while (1) {
                  switch (_context.prev = _context.next) {
                    case 0:
                      if (!Array.isArray(langs)) {
                        _context.next = 2;
                        break;
                      }

                      return _context.abrupt("return", langs);

                    case 2:
                      _context.next = 4;
                      return getSanityClient().fetch(langs.query);

                    case 4:
                      r = _context.sent;
                      value = langs.value;

                      if (!(typeof value === 'string')) {
                        _context.next = 8;
                        break;
                      }

                      return _context.abrupt("return", r.map(function (l) {
                        return objectSafeGet(l, value);
                      }));

                    case 8:
                      return _context.abrupt("return", r.map(function (l) {
                        // @deprecated
                        if ('name' in value) {
                          return {
                            name: objectSafeGet(l, value.name),
                            title: objectSafeGet(l, value.title)
                          };
                        }

                        return {
                          id: objectSafeGet(l, value.id),
                          title: objectSafeGet(l, value.title)
                        };
                      }));

                    case 9:
                    case "end":
                      return _context.stop();
                  }
                }
              }, _callee);
            }))();

          case 3:
            _context2.t1 = _context2.sent;
            languages = (0, _context2.t0)(_context2.t1);

            if (!languagesLoaderFn__default["default"]) {
              _context2.next = 8;
              break;
            }

            possiblePromise = languagesLoaderFn__default["default"](languages, document);
            return _context2.abrupt("return", possiblePromise);

          case 8:
            return _context2.abrupt("return", languages);

          case 9:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2);
  }));

  return function getLanguagesFromOption(_x, _x2) {
    return _ref.apply(this, arguments);
  };
}();

var getLanguageFromId = function getLanguageFromId(id) {
  // subpath
  var rx = new RegExp("".concat(I18nPrefix, "\\.[^.]+\\.([^.]+)"));
  var match = id.match(rx);
  if (match && match.length === 2) return match[1]; // delimiter

  var split = id.split(I18nDelimiter);
  if (split.length > 1) return split[1];
  return null;
};

var getBaseIdFromId = function getBaseIdFromId(id) {
  var nonDraftId = id.replace(/^drafts\./, ''); // subpath

  var rx = new RegExp("".concat(I18nPrefix, "\\.([^.]+)\\.[^.]+"));
  var match = nonDraftId.match(rx);
  if (match && match.length === 2) return match[1]; // delimiter

  var split = nonDraftId.split(I18nDelimiter);
  if (split.length > 0) return split[0];
  return nonDraftId;
};

var getAllSchemas = function getAllSchemas() {
  return schemas__default["default"]._original.types;
};

var getTranslationsFor = /*#__PURE__*/function () {
  var _ref = _asyncToGenerator__default["default"]( /*#__PURE__*/_regeneratorRuntime__default["default"].mark(function _callee(baseDocumentId) {
    var includeDrafts,
        config,
        client,
        segments,
        _documents,
        documents,
        _args = arguments;

    return _regeneratorRuntime__default["default"].wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            includeDrafts = _args.length > 1 && _args[1] !== undefined ? _args[1] : false;
            config = getConfig();
            client = getSanityClient();

            if (!(config.idStructure === IdStructure.DELIMITER)) {
              _context.next = 10;
              break;
            }

            segments = baseDocumentId.split('-');
            segments[segments.length - 1] = "".concat(segments[segments.length - 1]).concat(I18nDelimiter, "*");
            _context.next = 8;
            return client.fetch(includeDrafts ? '*[_id match $segments]' : "*[_id match $segments && !(_id in path('drafts.**'))]", {
              segments: segments
            });

          case 8:
            _documents = _context.sent;
            return _context.abrupt("return", _documents ? _documents.filter(function (d) {
              return d._id.startsWith(baseDocumentId) || includeDrafts && d._id.startsWith("drafts.".concat(baseDocumentId));
            }) : []);

          case 10:
            _context.next = 12;
            return client.fetch(includeDrafts ? '*[_id in path($path) || _id in path($draftPath)]' : '*[_id in path($path)]', {
              path: buildDocId(baseDocumentId, '*'),
              draftPath: "drafts.".concat(buildDocId(baseDocumentId, '*'))
            });

          case 12:
            documents = _context.sent;
            return _context.abrupt("return", documents !== null && documents !== void 0 ? documents : []);

          case 14:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));

  return function getTranslationsFor(_x) {
    return _ref.apply(this, arguments);
  };
}();

function makeObjectKey(input) {
  return input.replace(/[^a-zA-Z0-9_]/g, '_');
}

function ownKeys$1(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread$1(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$1(Object(source), !0).forEach(function (key) { _defineProperty__default["default"](target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

function createSanityReference(id) {
  var weak = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
  return _objectSpread$1({
    _type: 'reference',
    _ref: id.replace("drafts.", "")
  }, weak === true ? {
    _weak: true
  } : {});
}

function getLanguageFromDocument(doc, config) {
  return (doc === null || doc === void 0 ? void 0 : doc[config.fieldNames.lang]) || config.base || null;
}

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty__default["default"](target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
// can look up the existance of a base document on its own

function updateIntlFieldsForDocument(_x, _x2) {
  return _updateIntlFieldsForDocument.apply(this, arguments);
}

function _updateIntlFieldsForDocument() {
  _updateIntlFieldsForDocument = _asyncToGenerator__default["default"]( /*#__PURE__*/_regeneratorRuntime__default["default"].mark(function _callee(document, baseDocument) {
    var _getBaseLanguage;

    var type, id, schema, config, client, baseDocumentId, isTranslation, fieldName, refsFieldName, baseRefFieldName, langs, languageId, currentDocumentTransaction, translatedDocuments, baseDocumentTransaction, translatedRefs;
    return _regeneratorRuntime__default["default"].wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            type = document._type, id = document._id;
            schema = getSchema(type);
            config = getConfig(schema);
            client = getSanityClient();
            baseDocumentId = getBaseIdFromId(id);
            isTranslation = id !== baseDocumentId;
            fieldName = config.fieldNames.lang;
            refsFieldName = config.fieldNames.references;
            baseRefFieldName = config.fieldNames.baseReference;
            _context.next = 11;
            return getLanguagesFromOption(config.languages, document);

          case 11:
            langs = _context.sent;
            languageId = getLanguageFromDocument(document, config) || ((_getBaseLanguage = getBaseLanguage(langs, config.base)) === null || _getBaseLanguage === void 0 ? void 0 : _getBaseLanguage.id); // Update I18n field for current document

            currentDocumentTransaction = client.transaction();
            currentDocumentTransaction.createIfNotExists({
              _id: id,
              _type: type
            });
            currentDocumentTransaction.patch(id, {
              set: _objectSpread(_defineProperty__default["default"]({}, fieldName, languageId), isTranslation && config.referenceBehavior !== ReferenceBehavior.DISABLED ? _defineProperty__default["default"]({}, baseRefFieldName, createSanityReference(baseDocumentId, config.referenceBehavior === ReferenceBehavior.WEAK)) : {})
            });
            _context.next = 18;
            return currentDocumentTransaction.commit();

          case 18:
            if (!baseDocument) {
              _context.next = 29;
              break;
            }

            _context.next = 21;
            return getTranslationsFor(baseDocumentId);

          case 21:
            translatedDocuments = _context.sent;

            if (!(translatedDocuments.length > 0)) {
              _context.next = 29;
              break;
            }

            baseDocumentTransaction = client.transaction();
            translatedRefs = [];

            if (config.referenceBehavior !== ReferenceBehavior.DISABLED) {
              translatedRefs = ___default["default"].compact(translatedDocuments.map(function (doc) {
                var lang = getLanguageFromDocument(doc, config);
                if (!lang) return null;
                return _objectSpread({
                  _key: lang
                }, createSanityReference(doc._id, config.referenceBehavior === ReferenceBehavior.WEAK));
              }, {}));
            } // baseDocumentTransaction.createIfNotExists({_id: baseDocumentId, _type: type})


            baseDocumentTransaction.patch(baseDocumentId, {
              set: _defineProperty__default["default"]({}, refsFieldName, translatedRefs)
            });
            _context.next = 29;
            return baseDocumentTransaction.commit();

          case 29:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));
  return _updateIntlFieldsForDocument.apply(this, arguments);
}

function serializePath(path) {
  return path.reduce(function (target, part, i) {
    var isIndex = typeof part === 'number';
    var isKey = types.isKeyedObject(part);
    var separator = i === 0 ? '' : '.';
    var add = isIndex || isKey ? '[]' : "".concat(separator).concat(part);
    return "".concat(target).concat(add);
  }, '');
}

exports.buildDocId = buildDocId;
exports.createSanityReference = createSanityReference;
exports.getAllSchemas = getAllSchemas;
exports.getBaseIdFromId = getBaseIdFromId;
exports.getBaseLanguage = getBaseLanguage;
exports.getConfig = getConfig;
exports.getLanguageFromDocument = getLanguageFromDocument;
exports.getLanguageFromId = getLanguageFromId;
exports.getLanguagesFromOption = getLanguagesFromOption;
exports.getSanityClient = getSanityClient;
exports.getSchema = getSchema;
exports.getTranslationsFor = getTranslationsFor;
exports.makeObjectKey = makeObjectKey;
exports.normalizeLanguageList = normalizeLanguageList;
exports.serializePath = serializePath;
exports.updateIntlFieldsForDocument = updateIntlFieldsForDocument;
//# sourceMappingURL=index.js.map
