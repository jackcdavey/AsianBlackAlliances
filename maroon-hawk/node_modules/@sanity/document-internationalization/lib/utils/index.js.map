{"version":3,"file":"index.js","sources":["../../src/constants/LanguageCultures.ts","../../src/constants/I18nPrefix.ts","../../src/constants/I18nDelimiter.ts","../../src/constants/ReferenceBehavior.ts","../../src/constants/IdStructure.ts","../../src/utils/getSchema.ts","../../src/utils/getConfig.ts","../../src/utils/buildDocId.ts","../../src/utils/normalizeLanguageList.ts","../../src/utils/getBaseLanguage.ts","../../src/utils/getSanityClient.ts","../../node_modules/just-safe-get/index.mjs","../../src/utils/getLanguagesFromOption.ts","../../src/utils/getLanguageFromId.ts","../../src/utils/getBaseIdFromId.ts","../../src/utils/getAllSchemas.ts","../../src/utils/getTranslationsForId.ts","../../src/utils/makeObjectKey.ts","../../src/utils/createSanityReference.ts","../../src/utils/getLanguageFromDocument.ts","../../src/utils/updateIntlFieldsForDocument.ts","../../src/utils/serializePath.ts"],"sourcesContent":["export const LanguageCultures = [\n  {\n    value: 'af',\n    title: 'Afrikaans',\n  },\n  {\n    value: 'af-ZA',\n    title: 'Afrikaans (South Africa)',\n  },\n  {\n    value: 'ar',\n    title: 'Arabic',\n  },\n  {\n    value: 'ar-AE',\n    title: 'Arabic (U.A.E.)',\n  },\n  {\n    value: 'ar-BH',\n    title: 'Arabic (Bahrain)',\n  },\n  {\n    value: 'ar-DZ',\n    title: 'Arabic (Algeria)',\n  },\n  {\n    value: 'ar-EG',\n    title: 'Arabic (Egypt)',\n  },\n  {\n    value: 'ar-IQ',\n    title: 'Arabic (Iraq)',\n  },\n  {\n    value: 'ar-JO',\n    title: 'Arabic (Jordan)',\n  },\n  {\n    value: 'ar-KW',\n    title: 'Arabic (Kuwait)',\n  },\n  {\n    value: 'ar-LB',\n    title: 'Arabic (Lebanon)',\n  },\n  {\n    value: 'ar-LY',\n    title: 'Arabic (Libya)',\n  },\n  {\n    value: 'ar-MA',\n    title: 'Arabic (Morocco)',\n  },\n  {\n    value: 'ar-OM',\n    title: 'Arabic (Oman)',\n  },\n  {\n    value: 'ar-QA',\n    title: 'Arabic (Qatar)',\n  },\n  {\n    value: 'ar-SA',\n    title: 'Arabic (Saudi Arabia)',\n  },\n  {\n    value: 'ar-SY',\n    title: 'Arabic (Syria)',\n  },\n  {\n    value: 'ar-TN',\n    title: 'Arabic (Tunisia)',\n  },\n  {\n    value: 'ar-YE',\n    title: 'Arabic (Yemen)',\n  },\n  {\n    value: 'az',\n    title: 'Azeri',\n  },\n  {\n    value: 'az-Cyrl-AZ',\n    title: 'Azeri (Cyrillic, Azerbaijan)',\n  },\n  {\n    value: 'az-Latn-AZ',\n    title: 'Azeri (Latin, Azerbaijan)',\n  },\n  {\n    value: 'be',\n    title: 'Belarusian',\n  },\n  {\n    value: 'be-BY',\n    title: 'Belarusian (Belarus)',\n  },\n  {\n    value: 'bg',\n    title: 'Bulgarian',\n  },\n  {\n    value: 'bg-BG',\n    title: 'Bulgarian (Bulgaria)',\n  },\n  {\n    value: 'bs-Latn-BA',\n    title: 'Bosnian (Bosnia and Herzegovina)',\n  },\n  {\n    value: 'ca',\n    title: 'Catalan',\n  },\n  {\n    value: 'ca-ES',\n    title: 'Catalan (Catalan)',\n  },\n  {\n    value: 'cs',\n    title: 'Czech',\n  },\n  {\n    value: 'cs-CZ',\n    title: 'Czech (Czech Republic)',\n  },\n  {\n    value: 'cy-GB',\n    title: 'Welsh (United Kingdom)',\n  },\n  {\n    value: 'da',\n    title: 'Danish',\n  },\n  {\n    value: 'da-DK',\n    title: 'Danish (Denmark)',\n  },\n  {\n    value: 'de',\n    title: 'German',\n  },\n  {\n    value: 'de-AT',\n    title: 'German (Austria)',\n  },\n  {\n    value: 'de-DE',\n    title: 'German (Germany)',\n  },\n  {\n    value: 'de-CH',\n    title: 'German (Switzerland)',\n  },\n  {\n    value: 'de-LI',\n    title: 'German (Liechtenstein)',\n  },\n  {\n    value: 'de-LU',\n    title: 'German (Luxembourg)',\n  },\n  {\n    value: 'dv',\n    title: 'Divehi',\n  },\n  {\n    value: 'dv-MV',\n    title: 'Divehi (Maldives)',\n  },\n  {\n    value: 'el',\n    title: 'Greek',\n  },\n  {\n    value: 'el-GR',\n    title: 'Greek (Greece)',\n  },\n  {\n    value: 'en',\n    title: 'English',\n  },\n  {\n    value: 'en-029',\n    title: 'English (Caribbean)',\n  },\n  {\n    value: 'en-AU',\n    title: 'English (Australia)',\n  },\n  {\n    value: 'en-BZ',\n    title: 'English (Belize)',\n  },\n  {\n    value: 'en-CA',\n    title: 'English (Canada)',\n  },\n  {\n    value: 'en-GB',\n    title: 'English (United Kingdom)',\n  },\n  {\n    value: 'en-IE',\n    title: 'English (Ireland)',\n  },\n  {\n    value: 'en-JM',\n    title: 'English (Jamaica)',\n  },\n  {\n    value: 'en-NZ',\n    title: 'English (New Zealand)',\n  },\n  {\n    value: 'en-PH',\n    title: 'English (Republic of the Philippines)',\n  },\n  {\n    value: 'en-TT',\n    title: 'English (Trinidad and Tobago)',\n  },\n  {\n    value: 'en-US',\n    title: 'English (United States)',\n  },\n  {\n    value: 'en-ZA',\n    title: 'English (South Africa)',\n  },\n  {\n    value: 'en-ZW',\n    title: 'English (Zimbabwe)',\n  },\n  {\n    value: 'es',\n    title: 'Spanish',\n  },\n  {\n    value: 'es-AR',\n    title: 'Spanish (Argentina)',\n  },\n  {\n    value: 'es-BO',\n    title: 'Spanish (Bolivia)',\n  },\n  {\n    value: 'es-CL',\n    title: 'Spanish (Chile)',\n  },\n  {\n    value: 'es-CO',\n    title: 'Spanish (Colombia)',\n  },\n  {\n    value: 'es-CR',\n    title: 'Spanish (Costa Rica)',\n  },\n  {\n    value: 'es-DO',\n    title: 'Spanish (Dominican Republic)',\n  },\n  {\n    value: 'es-EC',\n    title: 'Spanish (Ecuador)',\n  },\n  {\n    value: 'es-ES',\n    title: 'Spanish (Spain)',\n  },\n  {\n    value: 'es-GT',\n    title: 'Spanish (Guatemala)',\n  },\n  {\n    value: 'es-HN',\n    title: 'Spanish (Honduras)',\n  },\n  {\n    value: 'es-MX',\n    title: 'Spanish (Mexico)',\n  },\n  {\n    value: 'es-NI',\n    title: 'Spanish (Nicaragua)',\n  },\n  {\n    value: 'es-PA',\n    title: 'Spanish (Panama)',\n  },\n  {\n    value: 'es-PE',\n    title: 'Spanish (Peru)',\n  },\n  {\n    value: 'es-PR',\n    title: 'Spanish (Puerto Rico)',\n  },\n  {\n    value: 'es-PY',\n    title: 'Spanish (Paraguay)',\n  },\n  {\n    value: 'es-SV',\n    title: 'Spanish (El Salvador)',\n  },\n  {\n    value: 'es-UY',\n    title: 'Spanish (Uruguay)',\n  },\n  {\n    value: 'es-VE',\n    title: 'Spanish (Venezuela)',\n  },\n  {\n    value: 'et',\n    title: 'Estonian',\n  },\n  {\n    value: 'et-EE',\n    title: 'Estonian (Estonia)',\n  },\n  {\n    value: 'eu',\n    title: 'Basque',\n  },\n  {\n    value: 'eu-ES',\n    title: 'Basque (Basque)',\n  },\n  {\n    value: 'fa',\n    title: 'Persian',\n  },\n  {\n    value: 'fa-IR',\n    title: 'Persian (Iran)',\n  },\n  {\n    value: 'fi',\n    title: 'Finnish',\n  },\n  {\n    value: 'fi-FI',\n    title: 'Finnish (Finland)',\n  },\n  {\n    value: 'fo',\n    title: 'Faroese',\n  },\n  {\n    value: 'fo-FO',\n    title: 'Faroese (Faroe Islands)',\n  },\n  {\n    value: 'fr',\n    title: 'French',\n  },\n  {\n    value: 'fr-BE',\n    title: 'French (Belgium)',\n  },\n  {\n    value: 'fr-CA',\n    title: 'French (Canada)',\n  },\n  {\n    value: 'fr-FR',\n    title: 'French (France)',\n  },\n  {\n    value: 'fr-CH',\n    title: 'French (Switzerland)',\n  },\n  {\n    value: 'fr-LU',\n    title: 'French (Luxembourg)',\n  },\n  {\n    value: 'fr-MC',\n    title: 'French (Principality of Monaco)',\n  },\n  {\n    value: 'gl',\n    title: 'Galician',\n  },\n  {\n    value: 'gl-ES',\n    title: 'Galician (Galician)',\n  },\n  {\n    value: 'gu',\n    title: 'Gujarati',\n  },\n  {\n    value: 'gu-IN',\n    title: 'Gujarati (India)',\n  },\n  {\n    value: 'he',\n    title: 'Hebrew',\n  },\n  {\n    value: 'he-IL',\n    title: 'Hebrew (Israel)',\n  },\n  {\n    value: 'hi',\n    title: 'Hindi',\n  },\n  {\n    value: 'hi-IN',\n    title: 'Hindi (India)',\n  },\n  {\n    value: 'hr',\n    title: 'Croatian',\n  },\n  {\n    value: 'hr-BA',\n    title: 'Croatian (Bosnia and Herzegovina)',\n  },\n  {\n    value: 'hr-HR',\n    title: 'Croatian (Croatia)',\n  },\n  {\n    value: 'hu',\n    title: 'Hungarian',\n  },\n  {\n    value: 'hu-HU',\n    title: 'Hungarian (Hungary)',\n  },\n  {\n    value: 'hy',\n    title: 'Armenian',\n  },\n  {\n    value: 'hy-AM',\n    title: 'Armenian (Armenia)',\n  },\n  {\n    value: 'id',\n    title: 'Indonesian',\n  },\n  {\n    value: 'id-ID',\n    title: 'Indonesian (Indonesia)',\n  },\n  {\n    value: 'is',\n    title: 'Icelandic',\n  },\n  {\n    value: 'is-IS',\n    title: 'Icelandic (Iceland)',\n  },\n  {\n    value: 'it',\n    title: 'Italian',\n  },\n  {\n    value: 'it-CH',\n    title: 'Italian (Switzerland)',\n  },\n  {\n    value: 'it-IT',\n    title: 'Italian (Italy)',\n  },\n  {\n    value: 'ja',\n    title: 'Japanese',\n  },\n  {\n    value: 'ja-JP',\n    title: 'Japanese (Japan)',\n  },\n  {\n    value: 'ka',\n    title: 'Georgian',\n  },\n  {\n    value: 'ka-GE',\n    title: 'Georgian (Georgia)',\n  },\n  {\n    value: 'kk',\n    title: 'Kazakh',\n  },\n  {\n    value: 'kk-KZ',\n    title: 'Kazakh (Kazakhstan)',\n  },\n  {\n    value: 'kn',\n    title: 'Kannada',\n  },\n  {\n    value: 'kn-IN',\n    title: 'Kannada (India)',\n  },\n  {\n    value: 'ko',\n    title: 'Korean',\n  },\n  {\n    value: 'kok',\n    title: 'Konkani',\n  },\n  {\n    value: 'kok-IN',\n    title: 'Konkani (India)',\n  },\n  {\n    value: 'ko-KR',\n    title: 'Korean (Korea)',\n  },\n  {\n    value: 'ky',\n    title: 'Kyrgyz',\n  },\n  {\n    value: 'ky-KG',\n    title: 'Kyrgyz (Kyrgyzstan)',\n  },\n  {\n    value: 'lt',\n    title: 'Lithuanian',\n  },\n  {\n    value: 'lt-LT',\n    title: 'Lithuanian (Lithuania)',\n  },\n  {\n    value: 'lv',\n    title: 'Latvian',\n  },\n  {\n    value: 'lv-LV',\n    title: 'Latvian (Latvia)',\n  },\n  {\n    value: 'mi-NZ',\n    title: 'Maori (New Zealand)',\n  },\n  {\n    value: 'mk',\n    title: 'Macedonian',\n  },\n  {\n    value: 'mk-MK',\n    title: 'Macedonian (Former Yugoslav Republic of Macedonia)',\n  },\n  {\n    value: 'mn',\n    title: 'Mongolian',\n  },\n  {\n    value: 'mn-MN',\n    title: 'Mongolian (Cyrillic, Mongolia)',\n  },\n  {\n    value: 'mr',\n    title: 'Marathi',\n  },\n  {\n    value: 'mr-IN',\n    title: 'Marathi (India)',\n  },\n  {\n    value: 'ms',\n    title: 'Malay',\n  },\n  {\n    value: 'ms-BN',\n    title: 'Malay (Brunei Darussalam)',\n  },\n  {\n    value: 'ms-MY',\n    title: 'Malay (Malaysia)',\n  },\n  {\n    value: 'mt-MT',\n    title: 'Maltese (Malta)',\n  },\n  {\n    value: 'nb-NO',\n    title: 'Norwegian, Bokmal (Norway)',\n  },\n  {\n    value: 'nl',\n    title: 'Dutch',\n  },\n  {\n    value: 'nl-BE',\n    title: 'Dutch (Belgium)',\n  },\n  {\n    value: 'nl-NL',\n    title: 'Dutch (Netherlands)',\n  },\n  {\n    value: 'nn-NO',\n    title: 'Norwegian, Nynorsk (Norway)',\n  },\n  {\n    value: 'no',\n    title: 'Norwegian',\n  },\n  {\n    value: 'ns-ZA',\n    title: 'Northern Sotho (South Africa)',\n  },\n  {\n    value: 'pa',\n    title: 'Punjabi',\n  },\n  {\n    value: 'pa-IN',\n    title: 'Punjabi (India)',\n  },\n  {\n    value: 'pl',\n    title: 'Polish',\n  },\n  {\n    value: 'pl-PL',\n    title: 'Polish (Poland)',\n  },\n  {\n    value: 'pt',\n    title: 'Portuguese',\n  },\n  {\n    value: 'pt-BR',\n    title: 'Portuguese (Brazil)',\n  },\n  {\n    value: 'pt-PT',\n    title: 'Portuguese (Portugal)',\n  },\n  {\n    value: 'quz-BO',\n    title: 'Quechua (Bolivia)',\n  },\n  {\n    value: 'quz-EC',\n    title: 'Quechua (Ecuador)',\n  },\n  {\n    value: 'quz-PE',\n    title: 'Quechua (Peru)',\n  },\n  {\n    value: 'ro',\n    title: 'Romanian',\n  },\n  {\n    value: 'ro-RO',\n    title: 'Romanian (Romania)',\n  },\n  {\n    value: 'ru',\n    title: 'Russian',\n  },\n  {\n    value: 'ru-RU',\n    title: 'Russian (Russia)',\n  },\n  {\n    value: 'sa',\n    title: 'Sanskrit',\n  },\n  {\n    value: 'sa-IN',\n    title: 'Sanskrit (India)',\n  },\n  {\n    value: 'se-FI',\n    title: 'Sami (Northern) (Finland)',\n  },\n  {\n    value: 'se-NO',\n    title: 'Sami (Northern) (Norway)',\n  },\n  {\n    value: 'se-SE',\n    title: 'Sami (Northern) (Sweden)',\n  },\n  {\n    value: 'sk',\n    title: 'Slovak',\n  },\n  {\n    value: 'sk-SK',\n    title: 'Slovak (Slovakia)',\n  },\n  {\n    value: 'sl',\n    title: 'Slovenian',\n  },\n  {\n    value: 'sl-SI',\n    title: 'Slovenian (Slovenia)',\n  },\n  {\n    value: 'sma-NO',\n    title: 'Sami (Southern) (Norway)',\n  },\n  {\n    value: 'sma-SE',\n    title: 'Sami (Southern) (Sweden)',\n  },\n  {\n    value: 'smj-NO',\n    title: 'Sami (Lule) (Norway)',\n  },\n  {\n    value: 'smj-SE',\n    title: 'Sami (Lule) (Sweden)',\n  },\n  {\n    value: 'smn-FI',\n    title: 'Sami (Inari) (Finland)',\n  },\n  {\n    value: 'sms-FI',\n    title: 'Sami (Skolt) (Finland)',\n  },\n  {\n    value: 'sq',\n    title: 'Albanian',\n  },\n  {\n    value: 'sq-AL',\n    title: 'Albanian (Albania)',\n  },\n  {\n    value: 'sr',\n    title: 'Serbian',\n  },\n  {\n    value: 'sr-Cyrl-BA',\n    title: 'Serbian (Cyrillic) (Bosnia and Herzegovina)',\n  },\n  {\n    value: 'sr-Cyrl-CS',\n    title: 'Serbian (Cyrillic, Serbia)',\n  },\n  {\n    value: 'sr-Latn-BA',\n    title: 'Serbian (Latin) (Bosnia and Herzegovina)',\n  },\n  {\n    value: 'sr-Latn-CS',\n    title: 'Serbian (Latin, Serbia)',\n  },\n  {\n    value: 'sv',\n    title: 'Swedish',\n  },\n  {\n    value: 'sv-FI',\n    title: 'Swedish (Finland)',\n  },\n  {\n    value: 'sv-SE',\n    title: 'Swedish (Sweden)',\n  },\n  {\n    value: 'sw',\n    title: 'Kiswahili',\n  },\n  {\n    value: 'sw-KE',\n    title: 'Kiswahili (Kenya)',\n  },\n  {\n    value: 'syr',\n    title: 'Syriac',\n  },\n  {\n    value: 'syr-SY',\n    title: 'Syriac (Syria)',\n  },\n  {\n    value: 'ta',\n    title: 'Tamil',\n  },\n  {\n    value: 'ta-IN',\n    title: 'Tamil (India)',\n  },\n  {\n    value: 'te',\n    title: 'Telugu',\n  },\n  {\n    value: 'te-IN',\n    title: 'Telugu (India)',\n  },\n  {\n    value: 'th',\n    title: 'Thai',\n  },\n  {\n    value: 'th-TH',\n    title: 'Thai (Thailand)',\n  },\n  {\n    value: 'tn-ZA',\n    title: 'Tswana (South Africa)',\n  },\n  {\n    value: 'tr',\n    title: 'Turkish',\n  },\n  {\n    value: 'tr-TR',\n    title: 'Turkish (Turkey)',\n  },\n  {\n    value: 'tt',\n    title: 'Tatar',\n  },\n  {\n    value: 'tt-RU',\n    title: 'Tatar (Russia)',\n  },\n  {\n    value: 'uk',\n    title: 'Ukrainian',\n  },\n  {\n    value: 'uk-UA',\n    title: 'Ukrainian (Ukraine)',\n  },\n  {\n    value: 'ur',\n    title: 'Urdu',\n  },\n  {\n    value: 'ur-PK',\n    title: 'Urdu (Islamic Republic of Pakistan)',\n  },\n  {\n    value: 'uz',\n    title: 'Uzbek',\n  },\n  {\n    value: 'uz-Cyrl-UZ',\n    title: 'Uzbek (Cyrillic, Uzbekistan)',\n  },\n  {\n    value: 'uz-Latn-UZ',\n    title: 'Uzbek (Latin, Uzbekistan)',\n  },\n  {\n    value: 'vi',\n    title: 'Vietnamese',\n  },\n  {\n    value: 'vi-VN',\n    title: 'Vietnamese (Vietnam)',\n  },\n  {\n    value: 'xh-ZA',\n    title: 'Xhosa (South Africa)',\n  },\n  {\n    value: 'zh-CN',\n    title: \"Chinese (People's Republic of China)\",\n  },\n  {\n    value: 'zh-HK',\n    title: 'Chinese (Hong Kong S.A.R.)',\n  },\n  {\n    value: 'zh-CHS',\n    title: 'Chinese (Simplified)',\n  },\n  {\n    value: 'zh-CHT',\n    title: 'Chinese (Traditional)',\n  },\n  {\n    value: 'zh-MO',\n    title: 'Chinese (Macao S.A.R.)',\n  },\n  {\n    value: 'zh-SG',\n    title: 'Chinese (Singapore)',\n  },\n  {\n    value: 'zh-TW',\n    title: 'Chinese (Taiwan)',\n  },\n  {\n    value: 'zu-ZA',\n    title: 'Zulu (South Africa)',\n  },\n]\n","export const I18nPrefix = 'i18n'\n","export const I18nDelimiter = '__i18n_'\n","export enum ReferenceBehavior {\n  STRONG = 'strong',\n  WEAK = 'weak',\n  DISABLED = 'disabled',\n}\n","export enum IdStructure {\n  SUBPATH = 'subpath',\n  DELIMITER = 'delimiter',\n}\n","import schemas from 'part:@sanity/base/schema'\nimport {TSchema} from '../types'\n\nexport const getSchema = <T = any>(name: string): TSchema<T> => {\n  return schemas._original.types.find((s) => s.name === name)\n}\n","import config from 'config:@sanity/document-internationalization'\nimport {Ti18nSchema, Ti18nConfig} from '../types'\nimport {IdStructure, ReferenceBehavior} from '../constants'\nimport {getSchema} from './getSchema'\n\nconst getI18nConfigFromType = (type?: string | Ti18nSchema) => {\n  let i18nconfig: Ti18nConfig = {}\n\n  if (type) {\n    if (typeof type === 'string') {\n      const schema = getSchema<Ti18nSchema>(type)\n      if (schema && typeof schema.i18n !== 'boolean') {\n        i18nconfig = schema.i18n\n      }\n    } else if (typeof type.i18n !== 'boolean') {\n      i18nconfig = type.i18n\n    }\n  }\n\n  return i18nconfig\n}\n\nexport function getConfig(type?: string | Ti18nSchema): Required<{\n  [K in keyof Ti18nConfig]: Required<Ti18nConfig[K]>\n}> & {\n  withTranslationsMaintenance: boolean\n} {\n  const schemaConfig = getI18nConfigFromType(type)\n  const cfg = config\n\n  return {\n    base: schemaConfig?.base || cfg?.base || '',\n    idStructure: cfg.idStructure || IdStructure.DELIMITER,\n    referenceBehavior: cfg.referenceBehavior || ReferenceBehavior.STRONG,\n    withTranslationsMaintenance: cfg?.withTranslationsMaintenance === true,\n    fieldNames: {\n      lang: schemaConfig?.fieldNames?.lang || cfg?.fieldNames?.lang || '__i18n_lang',\n      references:\n        schemaConfig?.fieldNames?.references || cfg?.fieldNames?.references || '__i18n_refs',\n      baseReference:\n        schemaConfig?.fieldNames?.baseReference || cfg?.fieldNames?.baseReference || '__i18n_base',\n    },\n    languages: schemaConfig?.languages || cfg?.languages || [],\n  }\n}\n","import {I18nDelimiter, I18nPrefix, IdStructure} from '../constants'\nimport {getConfig} from './getConfig'\n\nexport const buildDocId = (id: string, lang: string | null) => {\n  const config = getConfig()\n  if (config.idStructure === IdStructure.DELIMITER) return `${id}${I18nDelimiter}${lang || '*'}`\n  return `${I18nPrefix}.${id}.${lang || '*'}`\n}\n","import {ILanguageObject} from '../types'\nimport {LanguageCultures} from '../constants'\n\ntype LanguageConfigObject =\n  | ILanguageObject\n  | (Omit<ILanguageObject, 'id'> & {\n      name: string\n    })\n\nexport const normalizeLanguageList = (languages: (string | LanguageConfigObject)[]) =>\n  languages.map<ILanguageObject>((l) => {\n    if (typeof l === 'string') {\n      const langCult = LanguageCultures.find((x) => x.value === l)\n      if (langCult) return {title: langCult.title, id: l}\n      return {title: l, id: l}\n    }\n\n    if ('name' in l) {\n      console.warn(\n        `The \"name\" field in your language configuration is deprecated, please replace it with \"id\".`\n      )\n      return {title: l.title, id: l.name}\n    }\n\n    return {title: l.title, id: l.id}\n  })\n","import {ILanguageObject} from '../types'\n\nexport const getBaseLanguage = (langs: ILanguageObject[], base?: string) => {\n  if (base) return langs.find((l) => l.id === base) || null\n  return langs.length > 0 ? langs[0] : null\n}\n","import client from 'part:@sanity/base/client'\nexport const getSanityClient = (): import('@sanity/client').SanityClient =>\n  client.withConfig({apiVersion: `2021-10-01`})\n","var objectSafeGet = get;\n\n/*\n  const obj = {a: {aa: {aaa: 2}}, b: 4};\n\n  get(obj, 'a.aa.aaa'); // 2\n  get(obj, ['a', 'aa', 'aaa']); // 2\n\n  get(obj, 'b.bb.bbb'); // undefined\n  get(obj, ['b', 'bb', 'bbb']); // undefined\n\n  get(obj.a, 'aa.aaa'); // 2\n  get(obj.a, ['aa', 'aaa']); // 2\n\n  get(obj.b, 'bb.bbb'); // undefined\n  get(obj.b, ['bb', 'bbb']); // undefined\n\n  get(obj.b, 'bb.bbb', 42); // 42\n  get(obj.b, ['bb', 'bbb'], 42); // 42\n\n  get(null, 'a'); // undefined\n  get(undefined, ['a']); // undefined\n\n  get(null, 'a', 42); // 42\n  get(undefined, ['a'], 42); // 42\n\n  const obj = {a: {}};\n  const sym = Symbol();\n  obj.a[sym] = 4;\n  get(obj.a, sym); // 4\n*/\n\nfunction get(obj, propsArg, defaultValue) {\n  if (!obj) {\n    return defaultValue;\n  }\n  var props, prop;\n  if (Array.isArray(propsArg)) {\n    props = propsArg.slice(0);\n  }\n  if (typeof propsArg == 'string') {\n    props = propsArg.split('.');\n  }\n  if (typeof propsArg == 'symbol') {\n    props = [propsArg];\n  }\n  if (!Array.isArray(props)) {\n    throw new Error('props arg must be an array, a string or a symbol');\n  }\n  while (props.length) {\n    prop = props.shift();\n    if (!obj) {\n      return defaultValue;\n    }\n    obj = obj[prop];\n    if (obj === undefined) {\n      return defaultValue;\n    }\n  }\n  return obj;\n}\n\nexport {objectSafeGet as default};\n","import get from 'just-safe-get'\nimport languagesLoaderFn from 'part:@sanity/document-internationalization/languages/loader?'\nimport type {SanityDocument} from '@sanity/client'\nimport {ILanguageObject, TLanguagesOption} from '../types'\nimport {normalizeLanguageList} from './normalizeLanguageList'\nimport {getSanityClient} from './getSanityClient'\n\nexport const getLanguagesFromOption = async <D extends SanityDocument>(\n  langs: TLanguagesOption,\n  document?: D | null\n): Promise<ILanguageObject[]> => {\n  const languages = normalizeLanguageList(\n    await (async () => {\n      if (Array.isArray(langs)) return langs\n      const r = await getSanityClient().fetch(langs.query)\n      const value = langs.value\n\n      if (typeof value === 'string') return r.map((l) => get(l, value))\n      return r.map((l) => {\n        // @deprecated\n        if ('name' in value) {\n          return {\n            name: get(l, value.name),\n            title: get(l, value.title),\n          }\n        }\n\n        return {\n          id: get(l, value.id),\n          title: get(l, value.title),\n        }\n      })\n    })()\n  )\n  if (languagesLoaderFn) {\n    const possiblePromise = languagesLoaderFn(languages, document)\n    return possiblePromise\n  }\n  return languages\n}\n","import {I18nPrefix, I18nDelimiter} from '../constants'\n\nexport const getLanguageFromId = (id: string) => {\n  // subpath\n  const rx = new RegExp(`${I18nPrefix}\\\\.[^.]+\\\\.([^.]+)`)\n  const match = id.match(rx)\n  if (match && match.length === 2) return match[1]\n\n  // delimiter\n  const split = id.split(I18nDelimiter)\n  if (split.length > 1) return split[1]\n  return null\n}\n","import {I18nPrefix, I18nDelimiter} from '../constants'\n\nexport const getBaseIdFromId = (id: string): string => {\n  const nonDraftId = id.replace(/^drafts\\./, '')\n\n  // subpath\n  const rx = new RegExp(`${I18nPrefix}\\\\.([^.]+)\\\\.[^.]+`)\n  const match = nonDraftId.match(rx)\n  if (match && match.length === 2) return match[1]\n\n  // delimiter\n  const split = nonDraftId.split(I18nDelimiter)\n  if (split.length > 0) return split[0]\n\n  return nonDraftId\n}\n","import schemas from 'part:@sanity/base/schema'\nimport {TSchema} from '../types'\n\nexport const getAllSchemas = (): TSchema[] => {\n  return schemas._original.types\n}\n","import type {SanityDocument} from '@sanity/client'\nimport {I18nDelimiter, IdStructure} from '../constants'\nimport {buildDocId} from './buildDocId'\nimport {getConfig} from './getConfig'\nimport {getSanityClient} from './getSanityClient'\n\nexport const getTranslationsFor = async (\n  baseDocumentId: string,\n  includeDrafts = false\n): Promise<SanityDocument[]> => {\n  const config = getConfig()\n  const client = getSanityClient()\n  if (config.idStructure === IdStructure.DELIMITER) {\n    const segments = baseDocumentId.split('-')\n    segments[segments.length - 1] = `${segments[segments.length - 1]}${I18nDelimiter}*`\n    const documents = await client.fetch<SanityDocument[]>(\n      includeDrafts\n        ? '*[_id match $segments]'\n        : `*[_id match $segments && !(_id in path('drafts.**'))]`,\n      {segments}\n    )\n    return documents\n      ? documents.filter(\n          (d) =>\n            d._id.startsWith(baseDocumentId) ||\n            (includeDrafts && d._id.startsWith(`drafts.${baseDocumentId}`))\n        )\n      : []\n  }\n  const documents = await client.fetch<SanityDocument[]>(\n    includeDrafts ? '*[_id in path($path) || _id in path($draftPath)]' : '*[_id in path($path)]',\n    {\n      path: buildDocId(baseDocumentId, '*'),\n      draftPath: `drafts.${buildDocId(baseDocumentId, '*')}`,\n    }\n  )\n  return documents ?? []\n}\n","export function makeObjectKey(input: string) {\n  return input.replace(/[^a-zA-Z0-9_]/g, '_')\n}\n","import {Reference} from '@sanity/types'\n\ntype Ref = Omit<Reference, '_type'> & {_type: 'reference'}\n\nexport function createSanityReference(id: string, weak = false): Ref {\n  return {\n    _type: 'reference' as const,\n    _ref: id.replace(`drafts.`, ``),\n    ...(weak === true ? {_weak: true} : {}),\n  }\n}\n","import type {SanityDocument} from '@sanity/client'\nimport type {getConfig} from './getConfig'\n\nexport function getLanguageFromDocument(\n  doc: SanityDocument,\n  config: ReturnType<typeof getConfig>\n): string | null {\n  return doc?.[config.fieldNames.lang] || config.base || null\n}\n","import _ from 'lodash'\nimport {SanityDocument} from '@sanity/client'\nimport {ITranslationRef, Ti18nSchema} from '../types'\nimport {ReferenceBehavior} from '../constants'\nimport {getSanityClient} from './getSanityClient'\nimport {getConfig} from './getConfig'\nimport {getSchema} from './getSchema'\nimport {getLanguagesFromOption} from './getLanguagesFromOption'\nimport {getBaseLanguage} from './getBaseLanguage'\nimport {getTranslationsFor} from './getTranslationsForId'\nimport {getBaseIdFromId} from './getBaseIdFromId'\nimport {createSanityReference} from './createSanityReference'\nimport {getLanguageFromDocument} from './getLanguageFromDocument'\n\n// @TODO make this into a hook so the hook\n// can look up the existance of a base document on its own\nexport async function updateIntlFieldsForDocument(\n  document: SanityDocument,\n  baseDocument?: SanityDocument\n): Promise<void> {\n  const {_type: type, _id: id} = document\n  const schema = getSchema<Ti18nSchema>(type)\n  const config = getConfig(schema)\n  const client = getSanityClient()\n  const baseDocumentId = getBaseIdFromId(id)\n  const isTranslation = id !== baseDocumentId\n  const fieldName = config.fieldNames.lang\n  const refsFieldName = config.fieldNames.references\n  const baseRefFieldName = config.fieldNames.baseReference\n  const langs = await getLanguagesFromOption(config.languages, document)\n  const languageId =\n    getLanguageFromDocument(document, config) || getBaseLanguage(langs, config.base)?.id\n\n  // Update I18n field for current document\n  const currentDocumentTransaction = client.transaction()\n  currentDocumentTransaction.createIfNotExists({_id: id, _type: type})\n  currentDocumentTransaction.patch(id, {\n    set: {\n      [fieldName]: languageId,\n      ...(isTranslation && config.referenceBehavior !== ReferenceBehavior.DISABLED\n        ? {\n            [baseRefFieldName]: createSanityReference(\n              baseDocumentId,\n              config.referenceBehavior === ReferenceBehavior.WEAK\n            ),\n          }\n        : {}),\n    },\n  })\n  await currentDocumentTransaction.commit()\n\n  // update base document reference if required\n  if (baseDocument) {\n    const translatedDocuments = await getTranslationsFor(baseDocumentId)\n    if (translatedDocuments.length > 0) {\n      const baseDocumentTransaction = client.transaction()\n      let translatedRefs: ITranslationRef[] = []\n      if (config.referenceBehavior !== ReferenceBehavior.DISABLED) {\n        translatedRefs = _.compact(\n          translatedDocuments.map((doc) => {\n            const lang = getLanguageFromDocument(doc, config)\n            if (!lang) return null\n            return {\n              _key: lang,\n              ...createSanityReference(\n                doc._id,\n                config.referenceBehavior === ReferenceBehavior.WEAK\n              ),\n            }\n          }, {})\n        )\n      }\n      // baseDocumentTransaction.createIfNotExists({_id: baseDocumentId, _type: type})\n      baseDocumentTransaction.patch(baseDocumentId, {\n        set: {\n          [refsFieldName]: translatedRefs,\n        },\n      })\n      await baseDocumentTransaction.commit()\n    }\n  }\n}\n","import {Path, isKeyedObject} from '@sanity/types'\n\nexport function serializePath(path: Path): string {\n  return path.reduce<string>((target, part, i) => {\n    const isIndex = typeof part === 'number'\n    const isKey = isKeyedObject(part)\n    const separator = i === 0 ? '' : '.'\n    const add = isIndex || isKey ? '[]' : `${separator}${part}`\n    return `${target}${add}`\n  }, '')\n}\n"],"names":["LanguageCultures","value","title","I18nPrefix","I18nDelimiter","ReferenceBehavior","IdStructure","getSchema","name","schemas","_original","types","find","s","getI18nConfigFromType","type","i18nconfig","schema","i18n","getConfig","schemaConfig","cfg","config","base","idStructure","DELIMITER","referenceBehavior","STRONG","withTranslationsMaintenance","fieldNames","lang","references","baseReference","languages","buildDocId","id","normalizeLanguageList","map","l","langCult","x","console","warn","getBaseLanguage","langs","length","getSanityClient","client","withConfig","apiVersion","getLanguagesFromOption","_asyncToGenerator","_regeneratorRuntime","document","Array","isArray","fetch","query","r","get","languagesLoaderFn","possiblePromise","getLanguageFromId","rx","RegExp","match","split","getBaseIdFromId","nonDraftId","replace","getAllSchemas","getTranslationsFor","baseDocumentId","includeDrafts","segments","documents","filter","d","_id","startsWith","path","draftPath","makeObjectKey","input","createSanityReference","weak","_objectSpread","_type","_ref","_weak","getLanguageFromDocument","doc","updateIntlFieldsForDocument","baseDocument","isTranslation","fieldName","refsFieldName","baseRefFieldName","languageId","currentDocumentTransaction","transaction","createIfNotExists","patch","set","DISABLED","_defineProperty","WEAK","commit","translatedDocuments","baseDocumentTransaction","translatedRefs","_","compact","_key","serializePath","reduce","target","part","i","isIndex","isKey","isKeyedObject","separator","add"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;AAAO,IAAMA,gBAAgB,GAAG,CAC9B;AACEC,EAAAA,KAAK,EAAE,IADT;AAEEC,EAAAA,KAAK,EAAE,WAAA;AAFT,CAD8B,EAK9B;AACED,EAAAA,KAAK,EAAE,OADT;AAEEC,EAAAA,KAAK,EAAE,0BAAA;AAFT,CAL8B,EAS9B;AACED,EAAAA,KAAK,EAAE,IADT;AAEEC,EAAAA,KAAK,EAAE,QAAA;AAFT,CAT8B,EAa9B;AACED,EAAAA,KAAK,EAAE,OADT;AAEEC,EAAAA,KAAK,EAAE,iBAAA;AAFT,CAb8B,EAiB9B;AACED,EAAAA,KAAK,EAAE,OADT;AAEEC,EAAAA,KAAK,EAAE,kBAAA;AAFT,CAjB8B,EAqB9B;AACED,EAAAA,KAAK,EAAE,OADT;AAEEC,EAAAA,KAAK,EAAE,kBAAA;AAFT,CArB8B,EAyB9B;AACED,EAAAA,KAAK,EAAE,OADT;AAEEC,EAAAA,KAAK,EAAE,gBAAA;AAFT,CAzB8B,EA6B9B;AACED,EAAAA,KAAK,EAAE,OADT;AAEEC,EAAAA,KAAK,EAAE,eAAA;AAFT,CA7B8B,EAiC9B;AACED,EAAAA,KAAK,EAAE,OADT;AAEEC,EAAAA,KAAK,EAAE,iBAAA;AAFT,CAjC8B,EAqC9B;AACED,EAAAA,KAAK,EAAE,OADT;AAEEC,EAAAA,KAAK,EAAE,iBAAA;AAFT,CArC8B,EAyC9B;AACED,EAAAA,KAAK,EAAE,OADT;AAEEC,EAAAA,KAAK,EAAE,kBAAA;AAFT,CAzC8B,EA6C9B;AACED,EAAAA,KAAK,EAAE,OADT;AAEEC,EAAAA,KAAK,EAAE,gBAAA;AAFT,CA7C8B,EAiD9B;AACED,EAAAA,KAAK,EAAE,OADT;AAEEC,EAAAA,KAAK,EAAE,kBAAA;AAFT,CAjD8B,EAqD9B;AACED,EAAAA,KAAK,EAAE,OADT;AAEEC,EAAAA,KAAK,EAAE,eAAA;AAFT,CArD8B,EAyD9B;AACED,EAAAA,KAAK,EAAE,OADT;AAEEC,EAAAA,KAAK,EAAE,gBAAA;AAFT,CAzD8B,EA6D9B;AACED,EAAAA,KAAK,EAAE,OADT;AAEEC,EAAAA,KAAK,EAAE,uBAAA;AAFT,CA7D8B,EAiE9B;AACED,EAAAA,KAAK,EAAE,OADT;AAEEC,EAAAA,KAAK,EAAE,gBAAA;AAFT,CAjE8B,EAqE9B;AACED,EAAAA,KAAK,EAAE,OADT;AAEEC,EAAAA,KAAK,EAAE,kBAAA;AAFT,CArE8B,EAyE9B;AACED,EAAAA,KAAK,EAAE,OADT;AAEEC,EAAAA,KAAK,EAAE,gBAAA;AAFT,CAzE8B,EA6E9B;AACED,EAAAA,KAAK,EAAE,IADT;AAEEC,EAAAA,KAAK,EAAE,OAAA;AAFT,CA7E8B,EAiF9B;AACED,EAAAA,KAAK,EAAE,YADT;AAEEC,EAAAA,KAAK,EAAE,8BAAA;AAFT,CAjF8B,EAqF9B;AACED,EAAAA,KAAK,EAAE,YADT;AAEEC,EAAAA,KAAK,EAAE,2BAAA;AAFT,CArF8B,EAyF9B;AACED,EAAAA,KAAK,EAAE,IADT;AAEEC,EAAAA,KAAK,EAAE,YAAA;AAFT,CAzF8B,EA6F9B;AACED,EAAAA,KAAK,EAAE,OADT;AAEEC,EAAAA,KAAK,EAAE,sBAAA;AAFT,CA7F8B,EAiG9B;AACED,EAAAA,KAAK,EAAE,IADT;AAEEC,EAAAA,KAAK,EAAE,WAAA;AAFT,CAjG8B,EAqG9B;AACED,EAAAA,KAAK,EAAE,OADT;AAEEC,EAAAA,KAAK,EAAE,sBAAA;AAFT,CArG8B,EAyG9B;AACED,EAAAA,KAAK,EAAE,YADT;AAEEC,EAAAA,KAAK,EAAE,kCAAA;AAFT,CAzG8B,EA6G9B;AACED,EAAAA,KAAK,EAAE,IADT;AAEEC,EAAAA,KAAK,EAAE,SAAA;AAFT,CA7G8B,EAiH9B;AACED,EAAAA,KAAK,EAAE,OADT;AAEEC,EAAAA,KAAK,EAAE,mBAAA;AAFT,CAjH8B,EAqH9B;AACED,EAAAA,KAAK,EAAE,IADT;AAEEC,EAAAA,KAAK,EAAE,OAAA;AAFT,CArH8B,EAyH9B;AACED,EAAAA,KAAK,EAAE,OADT;AAEEC,EAAAA,KAAK,EAAE,wBAAA;AAFT,CAzH8B,EA6H9B;AACED,EAAAA,KAAK,EAAE,OADT;AAEEC,EAAAA,KAAK,EAAE,wBAAA;AAFT,CA7H8B,EAiI9B;AACED,EAAAA,KAAK,EAAE,IADT;AAEEC,EAAAA,KAAK,EAAE,QAAA;AAFT,CAjI8B,EAqI9B;AACED,EAAAA,KAAK,EAAE,OADT;AAEEC,EAAAA,KAAK,EAAE,kBAAA;AAFT,CArI8B,EAyI9B;AACED,EAAAA,KAAK,EAAE,IADT;AAEEC,EAAAA,KAAK,EAAE,QAAA;AAFT,CAzI8B,EA6I9B;AACED,EAAAA,KAAK,EAAE,OADT;AAEEC,EAAAA,KAAK,EAAE,kBAAA;AAFT,CA7I8B,EAiJ9B;AACED,EAAAA,KAAK,EAAE,OADT;AAEEC,EAAAA,KAAK,EAAE,kBAAA;AAFT,CAjJ8B,EAqJ9B;AACED,EAAAA,KAAK,EAAE,OADT;AAEEC,EAAAA,KAAK,EAAE,sBAAA;AAFT,CArJ8B,EAyJ9B;AACED,EAAAA,KAAK,EAAE,OADT;AAEEC,EAAAA,KAAK,EAAE,wBAAA;AAFT,CAzJ8B,EA6J9B;AACED,EAAAA,KAAK,EAAE,OADT;AAEEC,EAAAA,KAAK,EAAE,qBAAA;AAFT,CA7J8B,EAiK9B;AACED,EAAAA,KAAK,EAAE,IADT;AAEEC,EAAAA,KAAK,EAAE,QAAA;AAFT,CAjK8B,EAqK9B;AACED,EAAAA,KAAK,EAAE,OADT;AAEEC,EAAAA,KAAK,EAAE,mBAAA;AAFT,CArK8B,EAyK9B;AACED,EAAAA,KAAK,EAAE,IADT;AAEEC,EAAAA,KAAK,EAAE,OAAA;AAFT,CAzK8B,EA6K9B;AACED,EAAAA,KAAK,EAAE,OADT;AAEEC,EAAAA,KAAK,EAAE,gBAAA;AAFT,CA7K8B,EAiL9B;AACED,EAAAA,KAAK,EAAE,IADT;AAEEC,EAAAA,KAAK,EAAE,SAAA;AAFT,CAjL8B,EAqL9B;AACED,EAAAA,KAAK,EAAE,QADT;AAEEC,EAAAA,KAAK,EAAE,qBAAA;AAFT,CArL8B,EAyL9B;AACED,EAAAA,KAAK,EAAE,OADT;AAEEC,EAAAA,KAAK,EAAE,qBAAA;AAFT,CAzL8B,EA6L9B;AACED,EAAAA,KAAK,EAAE,OADT;AAEEC,EAAAA,KAAK,EAAE,kBAAA;AAFT,CA7L8B,EAiM9B;AACED,EAAAA,KAAK,EAAE,OADT;AAEEC,EAAAA,KAAK,EAAE,kBAAA;AAFT,CAjM8B,EAqM9B;AACED,EAAAA,KAAK,EAAE,OADT;AAEEC,EAAAA,KAAK,EAAE,0BAAA;AAFT,CArM8B,EAyM9B;AACED,EAAAA,KAAK,EAAE,OADT;AAEEC,EAAAA,KAAK,EAAE,mBAAA;AAFT,CAzM8B,EA6M9B;AACED,EAAAA,KAAK,EAAE,OADT;AAEEC,EAAAA,KAAK,EAAE,mBAAA;AAFT,CA7M8B,EAiN9B;AACED,EAAAA,KAAK,EAAE,OADT;AAEEC,EAAAA,KAAK,EAAE,uBAAA;AAFT,CAjN8B,EAqN9B;AACED,EAAAA,KAAK,EAAE,OADT;AAEEC,EAAAA,KAAK,EAAE,uCAAA;AAFT,CArN8B,EAyN9B;AACED,EAAAA,KAAK,EAAE,OADT;AAEEC,EAAAA,KAAK,EAAE,+BAAA;AAFT,CAzN8B,EA6N9B;AACED,EAAAA,KAAK,EAAE,OADT;AAEEC,EAAAA,KAAK,EAAE,yBAAA;AAFT,CA7N8B,EAiO9B;AACED,EAAAA,KAAK,EAAE,OADT;AAEEC,EAAAA,KAAK,EAAE,wBAAA;AAFT,CAjO8B,EAqO9B;AACED,EAAAA,KAAK,EAAE,OADT;AAEEC,EAAAA,KAAK,EAAE,oBAAA;AAFT,CArO8B,EAyO9B;AACED,EAAAA,KAAK,EAAE,IADT;AAEEC,EAAAA,KAAK,EAAE,SAAA;AAFT,CAzO8B,EA6O9B;AACED,EAAAA,KAAK,EAAE,OADT;AAEEC,EAAAA,KAAK,EAAE,qBAAA;AAFT,CA7O8B,EAiP9B;AACED,EAAAA,KAAK,EAAE,OADT;AAEEC,EAAAA,KAAK,EAAE,mBAAA;AAFT,CAjP8B,EAqP9B;AACED,EAAAA,KAAK,EAAE,OADT;AAEEC,EAAAA,KAAK,EAAE,iBAAA;AAFT,CArP8B,EAyP9B;AACED,EAAAA,KAAK,EAAE,OADT;AAEEC,EAAAA,KAAK,EAAE,oBAAA;AAFT,CAzP8B,EA6P9B;AACED,EAAAA,KAAK,EAAE,OADT;AAEEC,EAAAA,KAAK,EAAE,sBAAA;AAFT,CA7P8B,EAiQ9B;AACED,EAAAA,KAAK,EAAE,OADT;AAEEC,EAAAA,KAAK,EAAE,8BAAA;AAFT,CAjQ8B,EAqQ9B;AACED,EAAAA,KAAK,EAAE,OADT;AAEEC,EAAAA,KAAK,EAAE,mBAAA;AAFT,CArQ8B,EAyQ9B;AACED,EAAAA,KAAK,EAAE,OADT;AAEEC,EAAAA,KAAK,EAAE,iBAAA;AAFT,CAzQ8B,EA6Q9B;AACED,EAAAA,KAAK,EAAE,OADT;AAEEC,EAAAA,KAAK,EAAE,qBAAA;AAFT,CA7Q8B,EAiR9B;AACED,EAAAA,KAAK,EAAE,OADT;AAEEC,EAAAA,KAAK,EAAE,oBAAA;AAFT,CAjR8B,EAqR9B;AACED,EAAAA,KAAK,EAAE,OADT;AAEEC,EAAAA,KAAK,EAAE,kBAAA;AAFT,CArR8B,EAyR9B;AACED,EAAAA,KAAK,EAAE,OADT;AAEEC,EAAAA,KAAK,EAAE,qBAAA;AAFT,CAzR8B,EA6R9B;AACED,EAAAA,KAAK,EAAE,OADT;AAEEC,EAAAA,KAAK,EAAE,kBAAA;AAFT,CA7R8B,EAiS9B;AACED,EAAAA,KAAK,EAAE,OADT;AAEEC,EAAAA,KAAK,EAAE,gBAAA;AAFT,CAjS8B,EAqS9B;AACED,EAAAA,KAAK,EAAE,OADT;AAEEC,EAAAA,KAAK,EAAE,uBAAA;AAFT,CArS8B,EAyS9B;AACED,EAAAA,KAAK,EAAE,OADT;AAEEC,EAAAA,KAAK,EAAE,oBAAA;AAFT,CAzS8B,EA6S9B;AACED,EAAAA,KAAK,EAAE,OADT;AAEEC,EAAAA,KAAK,EAAE,uBAAA;AAFT,CA7S8B,EAiT9B;AACED,EAAAA,KAAK,EAAE,OADT;AAEEC,EAAAA,KAAK,EAAE,mBAAA;AAFT,CAjT8B,EAqT9B;AACED,EAAAA,KAAK,EAAE,OADT;AAEEC,EAAAA,KAAK,EAAE,qBAAA;AAFT,CArT8B,EAyT9B;AACED,EAAAA,KAAK,EAAE,IADT;AAEEC,EAAAA,KAAK,EAAE,UAAA;AAFT,CAzT8B,EA6T9B;AACED,EAAAA,KAAK,EAAE,OADT;AAEEC,EAAAA,KAAK,EAAE,oBAAA;AAFT,CA7T8B,EAiU9B;AACED,EAAAA,KAAK,EAAE,IADT;AAEEC,EAAAA,KAAK,EAAE,QAAA;AAFT,CAjU8B,EAqU9B;AACED,EAAAA,KAAK,EAAE,OADT;AAEEC,EAAAA,KAAK,EAAE,iBAAA;AAFT,CArU8B,EAyU9B;AACED,EAAAA,KAAK,EAAE,IADT;AAEEC,EAAAA,KAAK,EAAE,SAAA;AAFT,CAzU8B,EA6U9B;AACED,EAAAA,KAAK,EAAE,OADT;AAEEC,EAAAA,KAAK,EAAE,gBAAA;AAFT,CA7U8B,EAiV9B;AACED,EAAAA,KAAK,EAAE,IADT;AAEEC,EAAAA,KAAK,EAAE,SAAA;AAFT,CAjV8B,EAqV9B;AACED,EAAAA,KAAK,EAAE,OADT;AAEEC,EAAAA,KAAK,EAAE,mBAAA;AAFT,CArV8B,EAyV9B;AACED,EAAAA,KAAK,EAAE,IADT;AAEEC,EAAAA,KAAK,EAAE,SAAA;AAFT,CAzV8B,EA6V9B;AACED,EAAAA,KAAK,EAAE,OADT;AAEEC,EAAAA,KAAK,EAAE,yBAAA;AAFT,CA7V8B,EAiW9B;AACED,EAAAA,KAAK,EAAE,IADT;AAEEC,EAAAA,KAAK,EAAE,QAAA;AAFT,CAjW8B,EAqW9B;AACED,EAAAA,KAAK,EAAE,OADT;AAEEC,EAAAA,KAAK,EAAE,kBAAA;AAFT,CArW8B,EAyW9B;AACED,EAAAA,KAAK,EAAE,OADT;AAEEC,EAAAA,KAAK,EAAE,iBAAA;AAFT,CAzW8B,EA6W9B;AACED,EAAAA,KAAK,EAAE,OADT;AAEEC,EAAAA,KAAK,EAAE,iBAAA;AAFT,CA7W8B,EAiX9B;AACED,EAAAA,KAAK,EAAE,OADT;AAEEC,EAAAA,KAAK,EAAE,sBAAA;AAFT,CAjX8B,EAqX9B;AACED,EAAAA,KAAK,EAAE,OADT;AAEEC,EAAAA,KAAK,EAAE,qBAAA;AAFT,CArX8B,EAyX9B;AACED,EAAAA,KAAK,EAAE,OADT;AAEEC,EAAAA,KAAK,EAAE,iCAAA;AAFT,CAzX8B,EA6X9B;AACED,EAAAA,KAAK,EAAE,IADT;AAEEC,EAAAA,KAAK,EAAE,UAAA;AAFT,CA7X8B,EAiY9B;AACED,EAAAA,KAAK,EAAE,OADT;AAEEC,EAAAA,KAAK,EAAE,qBAAA;AAFT,CAjY8B,EAqY9B;AACED,EAAAA,KAAK,EAAE,IADT;AAEEC,EAAAA,KAAK,EAAE,UAAA;AAFT,CArY8B,EAyY9B;AACED,EAAAA,KAAK,EAAE,OADT;AAEEC,EAAAA,KAAK,EAAE,kBAAA;AAFT,CAzY8B,EA6Y9B;AACED,EAAAA,KAAK,EAAE,IADT;AAEEC,EAAAA,KAAK,EAAE,QAAA;AAFT,CA7Y8B,EAiZ9B;AACED,EAAAA,KAAK,EAAE,OADT;AAEEC,EAAAA,KAAK,EAAE,iBAAA;AAFT,CAjZ8B,EAqZ9B;AACED,EAAAA,KAAK,EAAE,IADT;AAEEC,EAAAA,KAAK,EAAE,OAAA;AAFT,CArZ8B,EAyZ9B;AACED,EAAAA,KAAK,EAAE,OADT;AAEEC,EAAAA,KAAK,EAAE,eAAA;AAFT,CAzZ8B,EA6Z9B;AACED,EAAAA,KAAK,EAAE,IADT;AAEEC,EAAAA,KAAK,EAAE,UAAA;AAFT,CA7Z8B,EAia9B;AACED,EAAAA,KAAK,EAAE,OADT;AAEEC,EAAAA,KAAK,EAAE,mCAAA;AAFT,CAja8B,EAqa9B;AACED,EAAAA,KAAK,EAAE,OADT;AAEEC,EAAAA,KAAK,EAAE,oBAAA;AAFT,CAra8B,EAya9B;AACED,EAAAA,KAAK,EAAE,IADT;AAEEC,EAAAA,KAAK,EAAE,WAAA;AAFT,CAza8B,EA6a9B;AACED,EAAAA,KAAK,EAAE,OADT;AAEEC,EAAAA,KAAK,EAAE,qBAAA;AAFT,CA7a8B,EAib9B;AACED,EAAAA,KAAK,EAAE,IADT;AAEEC,EAAAA,KAAK,EAAE,UAAA;AAFT,CAjb8B,EAqb9B;AACED,EAAAA,KAAK,EAAE,OADT;AAEEC,EAAAA,KAAK,EAAE,oBAAA;AAFT,CArb8B,EAyb9B;AACED,EAAAA,KAAK,EAAE,IADT;AAEEC,EAAAA,KAAK,EAAE,YAAA;AAFT,CAzb8B,EA6b9B;AACED,EAAAA,KAAK,EAAE,OADT;AAEEC,EAAAA,KAAK,EAAE,wBAAA;AAFT,CA7b8B,EAic9B;AACED,EAAAA,KAAK,EAAE,IADT;AAEEC,EAAAA,KAAK,EAAE,WAAA;AAFT,CAjc8B,EAqc9B;AACED,EAAAA,KAAK,EAAE,OADT;AAEEC,EAAAA,KAAK,EAAE,qBAAA;AAFT,CArc8B,EAyc9B;AACED,EAAAA,KAAK,EAAE,IADT;AAEEC,EAAAA,KAAK,EAAE,SAAA;AAFT,CAzc8B,EA6c9B;AACED,EAAAA,KAAK,EAAE,OADT;AAEEC,EAAAA,KAAK,EAAE,uBAAA;AAFT,CA7c8B,EAid9B;AACED,EAAAA,KAAK,EAAE,OADT;AAEEC,EAAAA,KAAK,EAAE,iBAAA;AAFT,CAjd8B,EAqd9B;AACED,EAAAA,KAAK,EAAE,IADT;AAEEC,EAAAA,KAAK,EAAE,UAAA;AAFT,CArd8B,EAyd9B;AACED,EAAAA,KAAK,EAAE,OADT;AAEEC,EAAAA,KAAK,EAAE,kBAAA;AAFT,CAzd8B,EA6d9B;AACED,EAAAA,KAAK,EAAE,IADT;AAEEC,EAAAA,KAAK,EAAE,UAAA;AAFT,CA7d8B,EAie9B;AACED,EAAAA,KAAK,EAAE,OADT;AAEEC,EAAAA,KAAK,EAAE,oBAAA;AAFT,CAje8B,EAqe9B;AACED,EAAAA,KAAK,EAAE,IADT;AAEEC,EAAAA,KAAK,EAAE,QAAA;AAFT,CAre8B,EAye9B;AACED,EAAAA,KAAK,EAAE,OADT;AAEEC,EAAAA,KAAK,EAAE,qBAAA;AAFT,CAze8B,EA6e9B;AACED,EAAAA,KAAK,EAAE,IADT;AAEEC,EAAAA,KAAK,EAAE,SAAA;AAFT,CA7e8B,EAif9B;AACED,EAAAA,KAAK,EAAE,OADT;AAEEC,EAAAA,KAAK,EAAE,iBAAA;AAFT,CAjf8B,EAqf9B;AACED,EAAAA,KAAK,EAAE,IADT;AAEEC,EAAAA,KAAK,EAAE,QAAA;AAFT,CArf8B,EAyf9B;AACED,EAAAA,KAAK,EAAE,KADT;AAEEC,EAAAA,KAAK,EAAE,SAAA;AAFT,CAzf8B,EA6f9B;AACED,EAAAA,KAAK,EAAE,QADT;AAEEC,EAAAA,KAAK,EAAE,iBAAA;AAFT,CA7f8B,EAigB9B;AACED,EAAAA,KAAK,EAAE,OADT;AAEEC,EAAAA,KAAK,EAAE,gBAAA;AAFT,CAjgB8B,EAqgB9B;AACED,EAAAA,KAAK,EAAE,IADT;AAEEC,EAAAA,KAAK,EAAE,QAAA;AAFT,CArgB8B,EAygB9B;AACED,EAAAA,KAAK,EAAE,OADT;AAEEC,EAAAA,KAAK,EAAE,qBAAA;AAFT,CAzgB8B,EA6gB9B;AACED,EAAAA,KAAK,EAAE,IADT;AAEEC,EAAAA,KAAK,EAAE,YAAA;AAFT,CA7gB8B,EAihB9B;AACED,EAAAA,KAAK,EAAE,OADT;AAEEC,EAAAA,KAAK,EAAE,wBAAA;AAFT,CAjhB8B,EAqhB9B;AACED,EAAAA,KAAK,EAAE,IADT;AAEEC,EAAAA,KAAK,EAAE,SAAA;AAFT,CArhB8B,EAyhB9B;AACED,EAAAA,KAAK,EAAE,OADT;AAEEC,EAAAA,KAAK,EAAE,kBAAA;AAFT,CAzhB8B,EA6hB9B;AACED,EAAAA,KAAK,EAAE,OADT;AAEEC,EAAAA,KAAK,EAAE,qBAAA;AAFT,CA7hB8B,EAiiB9B;AACED,EAAAA,KAAK,EAAE,IADT;AAEEC,EAAAA,KAAK,EAAE,YAAA;AAFT,CAjiB8B,EAqiB9B;AACED,EAAAA,KAAK,EAAE,OADT;AAEEC,EAAAA,KAAK,EAAE,oDAAA;AAFT,CAriB8B,EAyiB9B;AACED,EAAAA,KAAK,EAAE,IADT;AAEEC,EAAAA,KAAK,EAAE,WAAA;AAFT,CAziB8B,EA6iB9B;AACED,EAAAA,KAAK,EAAE,OADT;AAEEC,EAAAA,KAAK,EAAE,gCAAA;AAFT,CA7iB8B,EAijB9B;AACED,EAAAA,KAAK,EAAE,IADT;AAEEC,EAAAA,KAAK,EAAE,SAAA;AAFT,CAjjB8B,EAqjB9B;AACED,EAAAA,KAAK,EAAE,OADT;AAEEC,EAAAA,KAAK,EAAE,iBAAA;AAFT,CArjB8B,EAyjB9B;AACED,EAAAA,KAAK,EAAE,IADT;AAEEC,EAAAA,KAAK,EAAE,OAAA;AAFT,CAzjB8B,EA6jB9B;AACED,EAAAA,KAAK,EAAE,OADT;AAEEC,EAAAA,KAAK,EAAE,2BAAA;AAFT,CA7jB8B,EAikB9B;AACED,EAAAA,KAAK,EAAE,OADT;AAEEC,EAAAA,KAAK,EAAE,kBAAA;AAFT,CAjkB8B,EAqkB9B;AACED,EAAAA,KAAK,EAAE,OADT;AAEEC,EAAAA,KAAK,EAAE,iBAAA;AAFT,CArkB8B,EAykB9B;AACED,EAAAA,KAAK,EAAE,OADT;AAEEC,EAAAA,KAAK,EAAE,4BAAA;AAFT,CAzkB8B,EA6kB9B;AACED,EAAAA,KAAK,EAAE,IADT;AAEEC,EAAAA,KAAK,EAAE,OAAA;AAFT,CA7kB8B,EAilB9B;AACED,EAAAA,KAAK,EAAE,OADT;AAEEC,EAAAA,KAAK,EAAE,iBAAA;AAFT,CAjlB8B,EAqlB9B;AACED,EAAAA,KAAK,EAAE,OADT;AAEEC,EAAAA,KAAK,EAAE,qBAAA;AAFT,CArlB8B,EAylB9B;AACED,EAAAA,KAAK,EAAE,OADT;AAEEC,EAAAA,KAAK,EAAE,6BAAA;AAFT,CAzlB8B,EA6lB9B;AACED,EAAAA,KAAK,EAAE,IADT;AAEEC,EAAAA,KAAK,EAAE,WAAA;AAFT,CA7lB8B,EAimB9B;AACED,EAAAA,KAAK,EAAE,OADT;AAEEC,EAAAA,KAAK,EAAE,+BAAA;AAFT,CAjmB8B,EAqmB9B;AACED,EAAAA,KAAK,EAAE,IADT;AAEEC,EAAAA,KAAK,EAAE,SAAA;AAFT,CArmB8B,EAymB9B;AACED,EAAAA,KAAK,EAAE,OADT;AAEEC,EAAAA,KAAK,EAAE,iBAAA;AAFT,CAzmB8B,EA6mB9B;AACED,EAAAA,KAAK,EAAE,IADT;AAEEC,EAAAA,KAAK,EAAE,QAAA;AAFT,CA7mB8B,EAinB9B;AACED,EAAAA,KAAK,EAAE,OADT;AAEEC,EAAAA,KAAK,EAAE,iBAAA;AAFT,CAjnB8B,EAqnB9B;AACED,EAAAA,KAAK,EAAE,IADT;AAEEC,EAAAA,KAAK,EAAE,YAAA;AAFT,CArnB8B,EAynB9B;AACED,EAAAA,KAAK,EAAE,OADT;AAEEC,EAAAA,KAAK,EAAE,qBAAA;AAFT,CAznB8B,EA6nB9B;AACED,EAAAA,KAAK,EAAE,OADT;AAEEC,EAAAA,KAAK,EAAE,uBAAA;AAFT,CA7nB8B,EAioB9B;AACED,EAAAA,KAAK,EAAE,QADT;AAEEC,EAAAA,KAAK,EAAE,mBAAA;AAFT,CAjoB8B,EAqoB9B;AACED,EAAAA,KAAK,EAAE,QADT;AAEEC,EAAAA,KAAK,EAAE,mBAAA;AAFT,CAroB8B,EAyoB9B;AACED,EAAAA,KAAK,EAAE,QADT;AAEEC,EAAAA,KAAK,EAAE,gBAAA;AAFT,CAzoB8B,EA6oB9B;AACED,EAAAA,KAAK,EAAE,IADT;AAEEC,EAAAA,KAAK,EAAE,UAAA;AAFT,CA7oB8B,EAipB9B;AACED,EAAAA,KAAK,EAAE,OADT;AAEEC,EAAAA,KAAK,EAAE,oBAAA;AAFT,CAjpB8B,EAqpB9B;AACED,EAAAA,KAAK,EAAE,IADT;AAEEC,EAAAA,KAAK,EAAE,SAAA;AAFT,CArpB8B,EAypB9B;AACED,EAAAA,KAAK,EAAE,OADT;AAEEC,EAAAA,KAAK,EAAE,kBAAA;AAFT,CAzpB8B,EA6pB9B;AACED,EAAAA,KAAK,EAAE,IADT;AAEEC,EAAAA,KAAK,EAAE,UAAA;AAFT,CA7pB8B,EAiqB9B;AACED,EAAAA,KAAK,EAAE,OADT;AAEEC,EAAAA,KAAK,EAAE,kBAAA;AAFT,CAjqB8B,EAqqB9B;AACED,EAAAA,KAAK,EAAE,OADT;AAEEC,EAAAA,KAAK,EAAE,2BAAA;AAFT,CArqB8B,EAyqB9B;AACED,EAAAA,KAAK,EAAE,OADT;AAEEC,EAAAA,KAAK,EAAE,0BAAA;AAFT,CAzqB8B,EA6qB9B;AACED,EAAAA,KAAK,EAAE,OADT;AAEEC,EAAAA,KAAK,EAAE,0BAAA;AAFT,CA7qB8B,EAirB9B;AACED,EAAAA,KAAK,EAAE,IADT;AAEEC,EAAAA,KAAK,EAAE,QAAA;AAFT,CAjrB8B,EAqrB9B;AACED,EAAAA,KAAK,EAAE,OADT;AAEEC,EAAAA,KAAK,EAAE,mBAAA;AAFT,CArrB8B,EAyrB9B;AACED,EAAAA,KAAK,EAAE,IADT;AAEEC,EAAAA,KAAK,EAAE,WAAA;AAFT,CAzrB8B,EA6rB9B;AACED,EAAAA,KAAK,EAAE,OADT;AAEEC,EAAAA,KAAK,EAAE,sBAAA;AAFT,CA7rB8B,EAisB9B;AACED,EAAAA,KAAK,EAAE,QADT;AAEEC,EAAAA,KAAK,EAAE,0BAAA;AAFT,CAjsB8B,EAqsB9B;AACED,EAAAA,KAAK,EAAE,QADT;AAEEC,EAAAA,KAAK,EAAE,0BAAA;AAFT,CArsB8B,EAysB9B;AACED,EAAAA,KAAK,EAAE,QADT;AAEEC,EAAAA,KAAK,EAAE,sBAAA;AAFT,CAzsB8B,EA6sB9B;AACED,EAAAA,KAAK,EAAE,QADT;AAEEC,EAAAA,KAAK,EAAE,sBAAA;AAFT,CA7sB8B,EAitB9B;AACED,EAAAA,KAAK,EAAE,QADT;AAEEC,EAAAA,KAAK,EAAE,wBAAA;AAFT,CAjtB8B,EAqtB9B;AACED,EAAAA,KAAK,EAAE,QADT;AAEEC,EAAAA,KAAK,EAAE,wBAAA;AAFT,CArtB8B,EAytB9B;AACED,EAAAA,KAAK,EAAE,IADT;AAEEC,EAAAA,KAAK,EAAE,UAAA;AAFT,CAztB8B,EA6tB9B;AACED,EAAAA,KAAK,EAAE,OADT;AAEEC,EAAAA,KAAK,EAAE,oBAAA;AAFT,CA7tB8B,EAiuB9B;AACED,EAAAA,KAAK,EAAE,IADT;AAEEC,EAAAA,KAAK,EAAE,SAAA;AAFT,CAjuB8B,EAquB9B;AACED,EAAAA,KAAK,EAAE,YADT;AAEEC,EAAAA,KAAK,EAAE,6CAAA;AAFT,CAruB8B,EAyuB9B;AACED,EAAAA,KAAK,EAAE,YADT;AAEEC,EAAAA,KAAK,EAAE,4BAAA;AAFT,CAzuB8B,EA6uB9B;AACED,EAAAA,KAAK,EAAE,YADT;AAEEC,EAAAA,KAAK,EAAE,0CAAA;AAFT,CA7uB8B,EAivB9B;AACED,EAAAA,KAAK,EAAE,YADT;AAEEC,EAAAA,KAAK,EAAE,yBAAA;AAFT,CAjvB8B,EAqvB9B;AACED,EAAAA,KAAK,EAAE,IADT;AAEEC,EAAAA,KAAK,EAAE,SAAA;AAFT,CArvB8B,EAyvB9B;AACED,EAAAA,KAAK,EAAE,OADT;AAEEC,EAAAA,KAAK,EAAE,mBAAA;AAFT,CAzvB8B,EA6vB9B;AACED,EAAAA,KAAK,EAAE,OADT;AAEEC,EAAAA,KAAK,EAAE,kBAAA;AAFT,CA7vB8B,EAiwB9B;AACED,EAAAA,KAAK,EAAE,IADT;AAEEC,EAAAA,KAAK,EAAE,WAAA;AAFT,CAjwB8B,EAqwB9B;AACED,EAAAA,KAAK,EAAE,OADT;AAEEC,EAAAA,KAAK,EAAE,mBAAA;AAFT,CArwB8B,EAywB9B;AACED,EAAAA,KAAK,EAAE,KADT;AAEEC,EAAAA,KAAK,EAAE,QAAA;AAFT,CAzwB8B,EA6wB9B;AACED,EAAAA,KAAK,EAAE,QADT;AAEEC,EAAAA,KAAK,EAAE,gBAAA;AAFT,CA7wB8B,EAixB9B;AACED,EAAAA,KAAK,EAAE,IADT;AAEEC,EAAAA,KAAK,EAAE,OAAA;AAFT,CAjxB8B,EAqxB9B;AACED,EAAAA,KAAK,EAAE,OADT;AAEEC,EAAAA,KAAK,EAAE,eAAA;AAFT,CArxB8B,EAyxB9B;AACED,EAAAA,KAAK,EAAE,IADT;AAEEC,EAAAA,KAAK,EAAE,QAAA;AAFT,CAzxB8B,EA6xB9B;AACED,EAAAA,KAAK,EAAE,OADT;AAEEC,EAAAA,KAAK,EAAE,gBAAA;AAFT,CA7xB8B,EAiyB9B;AACED,EAAAA,KAAK,EAAE,IADT;AAEEC,EAAAA,KAAK,EAAE,MAAA;AAFT,CAjyB8B,EAqyB9B;AACED,EAAAA,KAAK,EAAE,OADT;AAEEC,EAAAA,KAAK,EAAE,iBAAA;AAFT,CAryB8B,EAyyB9B;AACED,EAAAA,KAAK,EAAE,OADT;AAEEC,EAAAA,KAAK,EAAE,uBAAA;AAFT,CAzyB8B,EA6yB9B;AACED,EAAAA,KAAK,EAAE,IADT;AAEEC,EAAAA,KAAK,EAAE,SAAA;AAFT,CA7yB8B,EAizB9B;AACED,EAAAA,KAAK,EAAE,OADT;AAEEC,EAAAA,KAAK,EAAE,kBAAA;AAFT,CAjzB8B,EAqzB9B;AACED,EAAAA,KAAK,EAAE,IADT;AAEEC,EAAAA,KAAK,EAAE,OAAA;AAFT,CArzB8B,EAyzB9B;AACED,EAAAA,KAAK,EAAE,OADT;AAEEC,EAAAA,KAAK,EAAE,gBAAA;AAFT,CAzzB8B,EA6zB9B;AACED,EAAAA,KAAK,EAAE,IADT;AAEEC,EAAAA,KAAK,EAAE,WAAA;AAFT,CA7zB8B,EAi0B9B;AACED,EAAAA,KAAK,EAAE,OADT;AAEEC,EAAAA,KAAK,EAAE,qBAAA;AAFT,CAj0B8B,EAq0B9B;AACED,EAAAA,KAAK,EAAE,IADT;AAEEC,EAAAA,KAAK,EAAE,MAAA;AAFT,CAr0B8B,EAy0B9B;AACED,EAAAA,KAAK,EAAE,OADT;AAEEC,EAAAA,KAAK,EAAE,qCAAA;AAFT,CAz0B8B,EA60B9B;AACED,EAAAA,KAAK,EAAE,IADT;AAEEC,EAAAA,KAAK,EAAE,OAAA;AAFT,CA70B8B,EAi1B9B;AACED,EAAAA,KAAK,EAAE,YADT;AAEEC,EAAAA,KAAK,EAAE,8BAAA;AAFT,CAj1B8B,EAq1B9B;AACED,EAAAA,KAAK,EAAE,YADT;AAEEC,EAAAA,KAAK,EAAE,2BAAA;AAFT,CAr1B8B,EAy1B9B;AACED,EAAAA,KAAK,EAAE,IADT;AAEEC,EAAAA,KAAK,EAAE,YAAA;AAFT,CAz1B8B,EA61B9B;AACED,EAAAA,KAAK,EAAE,OADT;AAEEC,EAAAA,KAAK,EAAE,sBAAA;AAFT,CA71B8B,EAi2B9B;AACED,EAAAA,KAAK,EAAE,OADT;AAEEC,EAAAA,KAAK,EAAE,sBAAA;AAFT,CAj2B8B,EAq2B9B;AACED,EAAAA,KAAK,EAAE,OADT;AAEEC,EAAAA,KAAK,EAAE,sCAAA;AAFT,CAr2B8B,EAy2B9B;AACED,EAAAA,KAAK,EAAE,OADT;AAEEC,EAAAA,KAAK,EAAE,4BAAA;AAFT,CAz2B8B,EA62B9B;AACED,EAAAA,KAAK,EAAE,QADT;AAEEC,EAAAA,KAAK,EAAE,sBAAA;AAFT,CA72B8B,EAi3B9B;AACED,EAAAA,KAAK,EAAE,QADT;AAEEC,EAAAA,KAAK,EAAE,uBAAA;AAFT,CAj3B8B,EAq3B9B;AACED,EAAAA,KAAK,EAAE,OADT;AAEEC,EAAAA,KAAK,EAAE,wBAAA;AAFT,CAr3B8B,EAy3B9B;AACED,EAAAA,KAAK,EAAE,OADT;AAEEC,EAAAA,KAAK,EAAE,qBAAA;AAFT,CAz3B8B,EA63B9B;AACED,EAAAA,KAAK,EAAE,OADT;AAEEC,EAAAA,KAAK,EAAE,kBAAA;AAFT,CA73B8B,EAi4B9B;AACED,EAAAA,KAAK,EAAE,OADT;AAEEC,EAAAA,KAAK,EAAE,qBAAA;AAFT,CAj4B8B,CAAzB;;ACAA,IAAMC,UAAU,GAAG,MAAnB;;ACAA,IAAMC,aAAa,GAAG,SAAtB;;ACAP,IAAYC,iBAAZ,CAAA;;WAAYA;EAAAA;EAAAA;EAAAA;AAAAA,CAAAA,EAAAA,sBAAAA;;ACAZ,IAAYC,WAAZ,CAAA;;WAAYA;EAAAA;EAAAA;AAAAA,CAAAA,EAAAA,gBAAAA;;ICGCC,SAAS,GAAG,SAAZA,SAAY,CAAUC,IAAV,EAAuC;EAC9D,OAAOC,2BAAO,CAACC,SAAR,CAAkBC,KAAlB,CAAwBC,IAAxB,CAA6B,UAACC,CAAD,EAAA;AAAA,IAAA,OAAOA,CAAC,CAACL,IAAF,KAAWA,IAAlB,CAAA;AAAA,GAA7B,CAAP,CAAA;AACD;;ACAD,IAAMM,qBAAqB,GAAG,SAAxBA,qBAAwB,CAACC,IAAD,EAAiC;EAC7D,IAAIC,UAAuB,GAAG,EAA9B,CAAA;;AAEA,EAAA,IAAID,IAAJ,EAAU;AACR,IAAA,IAAI,OAAOA,IAAP,KAAgB,QAApB,EAA8B;AAC5B,MAAA,IAAME,MAAM,GAAGV,SAAS,CAAcQ,IAAd,CAAxB,CAAA;;MACA,IAAIE,MAAM,IAAI,OAAOA,MAAM,CAACC,IAAd,KAAuB,SAArC,EAAgD;QAC9CF,UAAU,GAAGC,MAAM,CAACC,IAApB,CAAA;AACD,OAAA;KAJH,MAKO,IAAI,OAAOH,IAAI,CAACG,IAAZ,KAAqB,SAAzB,EAAoC;MACzCF,UAAU,GAAGD,IAAI,CAACG,IAAlB,CAAA;AACD,KAAA;AACF,GAAA;;AAED,EAAA,OAAOF,UAAP,CAAA;AACD,CAfD,CAAA;;AAiBO,SAASG,SAAT,CAAmBJ,IAAnB,EAIL;AAAA,EAAA,IAAA,qBAAA,EAAA,eAAA,EAAA,sBAAA,EAAA,gBAAA,EAAA,sBAAA,EAAA,gBAAA,CAAA;;AACA,EAAA,IAAMK,YAAY,GAAGN,qBAAqB,CAACC,IAAD,CAA1C,CAAA;EACA,IAAMM,GAAG,GAAGC,0BAAZ,CAAA;EAEA,OAAO;IACLC,IAAI,EAAE,CAAAH,YAAY,KAAA,IAAZ,IAAAA,YAAY,KAAA,KAAA,CAAZ,YAAAA,YAAY,CAAEG,IAAd,MAAsBF,GAAtB,aAAsBA,GAAtB,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAsBA,GAAG,CAAEE,IAA3B,KAAmC,EADpC;AAELC,IAAAA,WAAW,EAAEH,GAAG,CAACG,WAAJ,IAAmBlB,WAAW,CAACmB,SAFvC;AAGLC,IAAAA,iBAAiB,EAAEL,GAAG,CAACK,iBAAJ,IAAyBrB,iBAAiB,CAACsB,MAHzD;AAILC,IAAAA,2BAA2B,EAAE,CAAAP,GAAG,KAAA,IAAH,IAAAA,GAAG,KAAH,KAAA,CAAA,GAAA,KAAA,CAAA,GAAAA,GAAG,CAAEO,2BAAL,MAAqC,IAJ7D;AAKLC,IAAAA,UAAU,EAAE;MACVC,IAAI,EAAE,CAAAV,YAAY,KAAZ,IAAA,IAAAA,YAAY,KAAZ,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,CAAA,qBAAA,GAAAA,YAAY,CAAES,UAAd,MAAA,IAAA,IAAA,qBAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,qBAAA,CAA0BC,IAA1B,MAAkCT,GAAlC,KAAkCA,IAAAA,IAAAA,GAAlC,KAAkCA,KAAAA,CAAAA,GAAAA,KAAAA,CAAAA,GAAAA,CAAAA,eAAAA,GAAAA,GAAG,CAAEQ,UAAvC,MAAkC,IAAA,IAAA,eAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,eAAA,CAAiBC,IAAnD,CAAA,IAA2D,aADvD;MAEVC,UAAU,EACR,CAAAX,YAAY,KAAZ,IAAA,IAAAA,YAAY,KAAZ,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,CAAA,sBAAA,GAAAA,YAAY,CAAES,UAAd,MAAA,IAAA,IAAA,sBAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,sBAAA,CAA0BE,UAA1B,MAAwCV,GAAxC,KAAwCA,IAAAA,IAAAA,GAAxC,KAAwCA,KAAAA,CAAAA,GAAAA,KAAAA,CAAAA,GAAAA,CAAAA,gBAAAA,GAAAA,GAAG,CAAEQ,UAA7C,MAAwC,IAAA,IAAA,gBAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,gBAAA,CAAiBE,UAAzD,CAAA,IAAuE,aAH/D;MAIVC,aAAa,EACX,CAAAZ,YAAY,KAAZ,IAAA,IAAAA,YAAY,KAAZ,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,CAAA,sBAAA,GAAAA,YAAY,CAAES,UAAd,MAAA,IAAA,IAAA,sBAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,sBAAA,CAA0BG,aAA1B,MAA2CX,GAA3C,KAA2CA,IAAAA,IAAAA,GAA3C,KAA2CA,KAAAA,CAAAA,GAAAA,KAAAA,CAAAA,GAAAA,CAAAA,gBAAAA,GAAAA,GAAG,CAAEQ,UAAhD,MAAA,IAAA,IAAA,gBAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAA2C,gBAAiBG,CAAAA,aAA5D,CAA6E,IAAA,aAAA;KAV5E;AAYLC,IAAAA,SAAS,EAAE,CAAAb,YAAY,SAAZ,IAAAA,YAAY,WAAZ,GAAAA,KAAAA,CAAAA,GAAAA,YAAY,CAAEa,SAAd,MAA2BZ,GAA3B,KAA2BA,IAAAA,IAAAA,GAA3B,uBAA2BA,GAAG,CAAEY,SAAhC,CAA6C,IAAA,EAAA;GAZ1D,CAAA;AAcD;;ACzCM,IAAMC,UAAU,GAAG,SAAbA,UAAa,CAACC,EAAD,EAAaL,IAAb,EAAqC;EAC7D,IAAMR,MAAM,GAAGH,SAAS,EAAxB,CAAA;AACA,EAAA,IAAIG,MAAM,CAACE,WAAP,KAAuBlB,WAAW,CAACmB,SAAvC,EAAkD,OAAA,EAAA,CAAA,MAAA,CAAUU,EAAV,CAAe/B,CAAAA,MAAAA,CAAAA,aAAf,CAA+B0B,CAAAA,MAAAA,CAAAA,IAAI,IAAI,GAAvC,CAAA,CAAA;AAClD,EAAA,OAAA,EAAA,CAAA,MAAA,CAAU3B,UAAV,EAAwBgC,GAAAA,CAAAA,CAAAA,MAAAA,CAAAA,EAAxB,EAA8BL,GAAAA,CAAAA,CAAAA,MAAAA,CAAAA,IAAI,IAAI,GAAtC,CAAA,CAAA;AACD;;ICEYM,qBAAqB,GAAG,SAAxBA,qBAAwB,CAACH,SAAD,EAAA;AAAA,EAAA,OACnCA,SAAS,CAACI,GAAV,CAA+B,UAACC,CAAD,EAAO;AACpC,IAAA,IAAI,OAAOA,CAAP,KAAa,QAAjB,EAA2B;AACzB,MAAA,IAAMC,QAAQ,GAAGvC,gBAAgB,CAACY,IAAjB,CAAsB,UAAC4B,CAAD,EAAA;AAAA,QAAA,OAAOA,CAAC,CAACvC,KAAF,KAAYqC,CAAnB,CAAA;AAAA,OAAtB,CAAjB,CAAA;MACA,IAAIC,QAAJ,EAAc,OAAO;QAACrC,KAAK,EAAEqC,QAAQ,CAACrC,KAAjB;AAAwBiC,QAAAA,EAAE,EAAEG,CAAAA;OAAnC,CAAA;MACd,OAAO;AAACpC,QAAAA,KAAK,EAAEoC,CAAR;AAAWH,QAAAA,EAAE,EAAEG,CAAAA;OAAtB,CAAA;AACD,KAAA;;IAED,IAAI,MAAA,IAAUA,CAAd,EAAiB;AACfG,MAAAA,OAAO,CAACC,IAAR,CAAA,iGAAA,CAAA,CAAA;MAGA,OAAO;QAACxC,KAAK,EAAEoC,CAAC,CAACpC,KAAV;QAAiBiC,EAAE,EAAEG,CAAC,CAAC9B,IAAAA;OAA9B,CAAA;AACD,KAAA;;IAED,OAAO;MAACN,KAAK,EAAEoC,CAAC,CAACpC,KAAV;MAAiBiC,EAAE,EAAEG,CAAC,CAACH,EAAAA;KAA9B,CAAA;AACD,GAfD,CADmC,CAAA;AAAA;;ACP9B,IAAMQ,eAAe,GAAG,SAAlBA,eAAkB,CAACC,KAAD,EAA2BrB,IAA3B,EAA6C;EAC1E,IAAIA,IAAJ,EAAU,OAAOqB,KAAK,CAAChC,IAAN,CAAW,UAAC0B,CAAD,EAAA;AAAA,IAAA,OAAOA,CAAC,CAACH,EAAF,KAASZ,IAAhB,CAAA;AAAA,GAAX,KAAoC,IAA3C,CAAA;EACV,OAAOqB,KAAK,CAACC,MAAN,GAAe,CAAf,GAAmBD,KAAK,CAAC,CAAD,CAAxB,GAA8B,IAArC,CAAA;AACD;;ACJYE,IAAAA,eAAe,GAAG,SAAlBA,eAAkB,GAAA;EAAA,OAC7BC,0BAAM,CAACC,UAAP,CAAkB;IAACC,UAAU,EAAA,YAAA;AAAX,GAAlB,CAD6B,CAAA;AAAA;;ACD/B,IAAI,aAAa,GAAG,GAAG,CAAC;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,GAAG,CAAC,GAAG,EAAE,QAAQ,EAAE,YAAY,EAAE;AAC1C,EAAE,IAAI,CAAC,GAAG,EAAE;AACZ,IAAI,OAAO,YAAY,CAAC;AACxB,GAAG;AACH,EAAE,IAAI,KAAK,EAAE,IAAI,CAAC;AAClB,EAAE,IAAI,KAAK,CAAC,OAAO,CAAC,QAAQ,CAAC,EAAE;AAC/B,IAAI,KAAK,GAAG,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;AAC9B,GAAG;AACH,EAAE,IAAI,OAAO,QAAQ,IAAI,QAAQ,EAAE;AACnC,IAAI,KAAK,GAAG,QAAQ,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;AAChC,GAAG;AACH,EAAE,IAAI,OAAO,QAAQ,IAAI,QAAQ,EAAE;AACnC,IAAI,KAAK,GAAG,CAAC,QAAQ,CAAC,CAAC;AACvB,GAAG;AACH,EAAE,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,EAAE;AAC7B,IAAI,MAAM,IAAI,KAAK,CAAC,kDAAkD,CAAC,CAAC;AACxE,GAAG;AACH,EAAE,OAAO,KAAK,CAAC,MAAM,EAAE;AACvB,IAAI,IAAI,GAAG,KAAK,CAAC,KAAK,EAAE,CAAC;AACzB,IAAI,IAAI,CAAC,GAAG,EAAE;AACd,MAAM,OAAO,YAAY,CAAC;AAC1B,KAAK;AACL,IAAI,GAAG,GAAG,GAAG,CAAC,IAAI,CAAC,CAAC;AACpB,IAAI,IAAI,GAAG,KAAK,SAAS,EAAE;AAC3B,MAAM,OAAO,YAAY,CAAC;AAC1B,KAAK;AACL,GAAG;AACH,EAAE,OAAO,GAAG,CAAC;AACb;;ICrDaC,sBAAsB,gBAAA,YAAA;EAAA,IAAG,IAAA,GAAAC,qCAAA,eAAAC,uCAAA,CAAA,IAAA,CAAA,SAAA,QAAA,CACpCR,KADoC,EAEpCS,QAFoC,EAAA;AAAA,IAAA,IAAA,SAAA,EAAA,eAAA,CAAA;AAAA,IAAA,OAAAD,uCAAA,CAAA,IAAA,CAAA,SAAA,SAAA,CAAA,SAAA,EAAA;AAAA,MAAA,OAAA,CAAA,EAAA;AAAA,QAAA,QAAA,SAAA,CAAA,IAAA,GAAA,SAAA,CAAA,IAAA;AAAA,UAAA,KAAA,CAAA;AAAA,YAAA,SAAA,CAAA,EAAA,GAIlBhB,qBAJkB,CAAA;AAAA,YAAA,SAAA,CAAA,IAAA,GAAA,CAAA,CAAA;AAAA,YAAA,OAK5Be,qCAAC,eAAAC,uCAAA,CAAA,IAAA,CAAA,SAAA,OAAA,GAAA;AAAA,cAAA,IAAA,CAAA,EAAA,KAAA,CAAA;AAAA,cAAA,OAAAA,uCAAA,CAAA,IAAA,CAAA,SAAA,QAAA,CAAA,QAAA,EAAA;AAAA,gBAAA,OAAA,CAAA,EAAA;AAAA,kBAAA,QAAA,QAAA,CAAA,IAAA,GAAA,QAAA,CAAA,IAAA;AAAA,oBAAA,KAAA,CAAA;AAAA,sBAAA,IAAA,CACDE,KAAK,CAACC,OAAN,CAAcX,KAAd,CADC,EAAA;AAAA,wBAAA,QAAA,CAAA,IAAA,GAAA,CAAA,CAAA;AAAA,wBAAA,MAAA;AAAA,uBAAA;;AAAA,sBAAA,OAAA,QAAA,CAAA,MAAA,CAAA,QAAA,EAC4BA,KAD5B,CAAA,CAAA;;AAAA,oBAAA,KAAA,CAAA;AAAA,sBAAA,QAAA,CAAA,IAAA,GAAA,CAAA,CAAA;AAAA,sBAAA,OAEWE,eAAe,EAAGU,CAAAA,KAAlB,CAAwBZ,KAAK,CAACa,KAA9B,CAFX,CAAA;;AAAA,oBAAA,KAAA,CAAA;sBAECC,CAFD,GAAA,QAAA,CAAA,IAAA,CAAA;sBAGCzD,KAHD,GAGS2C,KAAK,CAAC3C,KAHf,CAAA;;sBAAA,IAKD,EAAA,OAAOA,KAAP,KAAiB,QALhB,CAAA,EAAA;AAAA,wBAAA,QAAA,CAAA,IAAA,GAAA,CAAA,CAAA;AAAA,wBAAA,MAAA;AAAA,uBAAA;;AAAA,sBAAA,OAAA,QAAA,CAAA,MAAA,CAAA,QAAA,EAKiCyD,CAAC,CAACrB,GAAF,CAAM,UAACC,CAAD,EAAA;AAAA,wBAAA,OAAOqB,aAAG,CAACrB,CAAD,EAAIrC,KAAJ,CAAV,CAAA;AAAA,uBAAN,CALjC,CAAA,CAAA;;AAAA,oBAAA,KAAA,CAAA;AAAA,sBAAA,OAAA,QAAA,CAAA,MAAA,CAAA,QAAA,EAMEyD,CAAC,CAACrB,GAAF,CAAM,UAACC,CAAD,EAAO;AAClB;wBACA,IAAI,MAAA,IAAUrC,KAAd,EAAqB;0BACnB,OAAO;4BACLO,IAAI,EAAEmD,aAAG,CAACrB,CAAD,EAAIrC,KAAK,CAACO,IAAV,CADJ;AAELN,4BAAAA,KAAK,EAAEyD,aAAG,CAACrB,CAAD,EAAIrC,KAAK,CAACC,KAAV,CAAA;2BAFZ,CAAA;AAID,yBAAA;;wBAED,OAAO;0BACLiC,EAAE,EAAEwB,aAAG,CAACrB,CAAD,EAAIrC,KAAK,CAACkC,EAAV,CADF;AAELjC,0BAAAA,KAAK,EAAEyD,aAAG,CAACrB,CAAD,EAAIrC,KAAK,CAACC,KAAV,CAAA;yBAFZ,CAAA;AAID,uBAbM,CANF,CAAA,CAAA;;AAAA,oBAAA,KAAA,CAAA,CAAA;AAAA,oBAAA,KAAA,KAAA;AAAA,sBAAA,OAAA,QAAA,CAAA,IAAA,EAAA,CAAA;AAAA,mBAAA;AAAA,iBAAA;AAAA,eAAA,EAAA,OAAA,CAAA,CAAA;AAAA,aAAD,CAL4B,CAAA,EAAA,CAAA;;AAAA,UAAA,KAAA,CAAA;AAAA,YAAA,SAAA,CAAA,EAAA,GAAA,SAAA,CAAA,IAAA,CAAA;YAI9B+B,SAJ8B,GAAA,IAAA,SAAA,CAAA,EAAA,EAAA,SAAA,CAAA,EAAA,CAAA,CAAA;;AAAA,YAAA,IAAA,CA2BhC2B,qCA3BgC,EAAA;AAAA,cAAA,SAAA,CAAA,IAAA,GAAA,CAAA,CAAA;AAAA,cAAA,MAAA;AAAA,aAAA;;AA4B5BC,YAAAA,eA5B4B,GA4BVD,qCAAiB,CAAC3B,SAAD,EAAYoB,QAAZ,CA5BP,CAAA;AAAA,YAAA,OAAA,SAAA,CAAA,MAAA,CAAA,QAAA,EA6B3BQ,eA7B2B,CAAA,CAAA;;AAAA,UAAA,KAAA,CAAA;AAAA,YAAA,OAAA,SAAA,CAAA,MAAA,CAAA,QAAA,EA+B7B5B,SA/B6B,CAAA,CAAA;;AAAA,UAAA,KAAA,CAAA,CAAA;AAAA,UAAA,KAAA,KAAA;AAAA,YAAA,OAAA,SAAA,CAAA,IAAA,EAAA,CAAA;AAAA,SAAA;AAAA,OAAA;AAAA,KAAA,EAAA,QAAA,CAAA,CAAA;GAAH,CAAA,CAAA,CAAA;;AAAA,EAAA,OAAA,SAAtBiB,sBAAsB,CAAA,EAAA,EAAA,GAAA,EAAA;AAAA,IAAA,OAAA,IAAA,CAAA,KAAA,CAAA,IAAA,EAAA,SAAA,CAAA,CAAA;AAAA,GAAA,CAAA;AAAA,CAA5B;;ICLMY,iBAAiB,GAAG,SAApBA,iBAAoB,CAAC3B,EAAD,EAAgB;AAC/C;AACA,EAAA,IAAM4B,EAAE,GAAG,IAAIC,MAAJ,CAAA,EAAA,CAAA,MAAA,CAAc7D,UAAd,EAAX,oBAAA,CAAA,CAAA,CAAA;AACA,EAAA,IAAM8D,KAAK,GAAG9B,EAAE,CAAC8B,KAAH,CAASF,EAAT,CAAd,CAAA;AACA,EAAA,IAAIE,KAAK,IAAIA,KAAK,CAACpB,MAAN,KAAiB,CAA9B,EAAiC,OAAOoB,KAAK,CAAC,CAAD,CAAZ,CAJc;;AAO/C,EAAA,IAAMC,KAAK,GAAG/B,EAAE,CAAC+B,KAAH,CAAS9D,aAAT,CAAd,CAAA;EACA,IAAI8D,KAAK,CAACrB,MAAN,GAAe,CAAnB,EAAsB,OAAOqB,KAAK,CAAC,CAAD,CAAZ,CAAA;AACtB,EAAA,OAAO,IAAP,CAAA;AACD;;ICVYC,eAAe,GAAG,SAAlBA,eAAkB,CAAChC,EAAD,EAAwB;EACrD,IAAMiC,UAAU,GAAGjC,EAAE,CAACkC,OAAH,CAAW,WAAX,EAAwB,EAAxB,CAAnB,CADqD;;AAIrD,EAAA,IAAMN,EAAE,GAAG,IAAIC,MAAJ,CAAA,EAAA,CAAA,MAAA,CAAc7D,UAAd,EAAX,oBAAA,CAAA,CAAA,CAAA;AACA,EAAA,IAAM8D,KAAK,GAAGG,UAAU,CAACH,KAAX,CAAiBF,EAAjB,CAAd,CAAA;AACA,EAAA,IAAIE,KAAK,IAAIA,KAAK,CAACpB,MAAN,KAAiB,CAA9B,EAAiC,OAAOoB,KAAK,CAAC,CAAD,CAAZ,CANoB;;AASrD,EAAA,IAAMC,KAAK,GAAGE,UAAU,CAACF,KAAX,CAAiB9D,aAAjB,CAAd,CAAA;EACA,IAAI8D,KAAK,CAACrB,MAAN,GAAe,CAAnB,EAAsB,OAAOqB,KAAK,CAAC,CAAD,CAAZ,CAAA;AAEtB,EAAA,OAAOE,UAAP,CAAA;AACD;;ACZYE,IAAAA,aAAa,GAAG,SAAhBA,aAAgB,GAAiB;AAC5C,EAAA,OAAO7D,2BAAO,CAACC,SAAR,CAAkBC,KAAzB,CAAA;AACD;;ICCY4D,kBAAkB,gBAAA,YAAA;AAAA,EAAA,IAAA,IAAA,GAAApB,qCAAA,eAAAC,uCAAA,CAAA,IAAA,CAAG,iBAChCoB,cADgC,EAAA;AAAA,IAAA,IAAA,aAAA;AAAA,QAAA,MAAA;AAAA,QAAA,MAAA;AAAA,QAAA,QAAA;AAAA,QAAA,UAAA;AAAA,QAAA,SAAA;AAAA,QAAA,KAAA,GAAA,SAAA,CAAA;;AAAA,IAAA,OAAApB,uCAAA,CAAA,IAAA,CAAA,SAAA,QAAA,CAAA,QAAA,EAAA;AAAA,MAAA,OAAA,CAAA,EAAA;AAAA,QAAA,QAAA,QAAA,CAAA,IAAA,GAAA,QAAA,CAAA,IAAA;AAAA,UAAA,KAAA,CAAA;AAEhCqB,YAAAA,aAFgC,2DAEhB,KAFgB,CAAA;YAI1BnD,MAJ0B,GAIjBH,SAAS,EAJQ,CAAA;YAK1B4B,MAL0B,GAKjBD,eAAe,EALE,CAAA;;AAAA,YAAA,IAAA,EAM5BxB,MAAM,CAACE,WAAP,KAAuBlB,WAAW,CAACmB,SANP,CAAA,EAAA;AAAA,cAAA,QAAA,CAAA,IAAA,GAAA,EAAA,CAAA;AAAA,cAAA,MAAA;AAAA,aAAA;;AAOxBiD,YAAAA,QAPwB,GAObF,cAAc,CAACN,KAAf,CAAqB,GAArB,CAPa,CAAA;AAQ9BQ,YAAAA,QAAQ,CAACA,QAAQ,CAAC7B,MAAT,GAAkB,CAAnB,CAAR,GAAA,EAAA,CAAA,MAAA,CAAmC6B,QAAQ,CAACA,QAAQ,CAAC7B,MAAT,GAAkB,CAAnB,CAA3C,SAAmEzC,aAAnE,EAAA,GAAA,CAAA,CAAA;AAR8B,YAAA,QAAA,CAAA,IAAA,GAAA,CAAA,CAAA;YAAA,OASN2C,MAAM,CAACS,KAAP,CACtBiB,aAAa,GACT,wBADS,0DADS,EAItB;AAACC,cAAAA,QAAQ,EAARA,QAAAA;AAAD,aAJsB,CATM,CAAA;;AAAA,UAAA,KAAA,CAAA;YASxBC,UATwB,GAAA,QAAA,CAAA,IAAA,CAAA;AAAA,YAAA,OAAA,QAAA,CAAA,MAAA,CAAA,QAAA,EAevBA,UAAS,GACZA,UAAS,CAACC,MAAV,CACE,UAACC,CAAD,EAAA;AAAA,cAAA,OACEA,CAAC,CAACC,GAAF,CAAMC,UAAN,CAAiBP,cAAjB,CAAA,IACCC,aAAa,IAAII,CAAC,CAACC,GAAF,CAAMC,UAAN,CAAA,SAAA,CAAA,MAAA,CAA2BP,cAA3B,CAFpB,CAAA,CAAA;aADF,CADY,GAMZ,EArB0B,CAAA,CAAA;;AAAA,UAAA,KAAA,EAAA;AAAA,YAAA,QAAA,CAAA,IAAA,GAAA,EAAA,CAAA;YAAA,OAuBRzB,MAAM,CAACS,KAAP,CACtBiB,aAAa,GAAG,kDAAH,GAAwD,uBAD/C,EAEtB;AACEO,cAAAA,IAAI,EAAE9C,UAAU,CAACsC,cAAD,EAAiB,GAAjB,CADlB;AAEES,cAAAA,SAAS,mBAAY/C,UAAU,CAACsC,cAAD,EAAiB,GAAjB,CAAtB,CAAA;AAFX,aAFsB,CAvBQ,CAAA;;AAAA,UAAA,KAAA,EAAA;YAuB1BG,SAvB0B,GAAA,QAAA,CAAA,IAAA,CAAA;AAAA,YAAA,OAAA,QAAA,CAAA,MAAA,CAAA,QAAA,EA8BzBA,SA9ByB,KA8BzBA,IAAAA,IAAAA,SA9ByB,KA8BzBA,KAAAA,CAAAA,GAAAA,SA9ByB,GA8BZ,EA9BY,CAAA,CAAA;;AAAA,UAAA,KAAA,EAAA,CAAA;AAAA,UAAA,KAAA,KAAA;AAAA,YAAA,OAAA,QAAA,CAAA,IAAA,EAAA,CAAA;AAAA,SAAA;AAAA,OAAA;AAAA,KAAA,EAAA,OAAA,CAAA,CAAA;GAAH,CAAA,CAAA,CAAA;;AAAA,EAAA,OAAA,SAAlBJ,kBAAkB,CAAA,EAAA,EAAA;AAAA,IAAA,OAAA,IAAA,CAAA,KAAA,CAAA,IAAA,EAAA,SAAA,CAAA,CAAA;AAAA,GAAA,CAAA;AAAA,CAAxB;;ACNA,SAASW,aAAT,CAAuBC,KAAvB,EAAsC;AAC3C,EAAA,OAAOA,KAAK,CAACd,OAAN,CAAc,gBAAd,EAAgC,GAAhC,CAAP,CAAA;AACD;;;;;;ACEM,SAASe,qBAAT,CAA+BjD,EAA/B,EAA8D;EAAA,IAAnBkD,IAAmB,uEAAZ,KAAY,CAAA;AACnE,EAAA,OAAAC,eAAA,CAAA;AACEC,IAAAA,KAAK,EAAE,WADT;IAEEC,IAAI,EAAErD,EAAE,CAACkC,OAAH,CAAA,SAAA,EAAA,EAAA,CAAA;GACFgB,EAAAA,IAAI,KAAK,IAAT,GAAgB;AAACI,IAAAA,KAAK,EAAE,IAAA;AAAR,GAAhB,GAAgC,EAHtC,CAAA,CAAA;AAKD;;ACPM,SAASC,uBAAT,CACLC,GADK,EAELrE,MAFK,EAGU;EACf,OAAO,CAAAqE,GAAG,KAAH,IAAA,IAAAA,GAAG,KAAH,KAAA,CAAA,GAAA,KAAA,CAAA,GAAAA,GAAG,CAAGrE,MAAM,CAACO,UAAP,CAAkBC,IAArB,CAAH,KAAiCR,MAAM,CAACC,IAAxC,IAAgD,IAAvD,CAAA;AACD;;;;;ACOD;;AACA,SAAsBqE,2BAAtB,CAAA,EAAA,EAAA,GAAA,EAAA;AAAA,EAAA,OAAA,4BAAA,CAAA,KAAA,CAAA,IAAA,EAAA,SAAA,CAAA,CAAA;AAAA,CAAA;;;kIAAO,SACLvC,OAAAA,CAAAA,QADK,EAELwC,YAFK,EAAA;AAAA,IAAA,IAAA,gBAAA,CAAA;;AAAA,IAAA,IAAA,IAAA,EAAA,EAAA,EAAA,MAAA,EAAA,MAAA,EAAA,MAAA,EAAA,cAAA,EAAA,aAAA,EAAA,SAAA,EAAA,aAAA,EAAA,gBAAA,EAAA,KAAA,EAAA,UAAA,EAAA,0BAAA,EAAA,mBAAA,EAAA,uBAAA,EAAA,cAAA,CAAA;AAAA,IAAA,OAAAzC,uCAAA,CAAA,IAAA,CAAA,SAAA,QAAA,CAAA,QAAA,EAAA;AAAA,MAAA,OAAA,CAAA,EAAA;AAAA,QAAA,QAAA,QAAA,CAAA,IAAA,GAAA,QAAA,CAAA,IAAA;AAAA,UAAA,KAAA,CAAA;YAISrC,IAJT,GAI0BsC,QAJ1B,CAIEkC,KAJF,EAIoBpD,EAJpB,GAI0BkB,QAJ1B,CAIeyB,GAJf,CAAA;AAKC7D,YAAAA,MALD,GAKUV,SAAS,CAAcQ,IAAd,CALnB,CAAA;AAMCO,YAAAA,MAND,GAMUH,SAAS,CAACF,MAAD,CANnB,CAAA;YAOC8B,MAPD,GAOUD,eAAe,EAPzB,CAAA;AAQC0B,YAAAA,cARD,GAQkBL,eAAe,CAAChC,EAAD,CARjC,CAAA;YASC2D,aATD,GASiB3D,EAAE,KAAKqC,cATxB,CAAA;AAUCuB,YAAAA,SAVD,GAUazE,MAAM,CAACO,UAAP,CAAkBC,IAV/B,CAAA;AAWCkE,YAAAA,aAXD,GAWiB1E,MAAM,CAACO,UAAP,CAAkBE,UAXnC,CAAA;AAYCkE,YAAAA,gBAZD,GAYoB3E,MAAM,CAACO,UAAP,CAAkBG,aAZtC,CAAA;AAAA,YAAA,QAAA,CAAA,IAAA,GAAA,EAAA,CAAA;AAAA,YAAA,OAaekB,sBAAsB,CAAC5B,MAAM,CAACW,SAAR,EAAmBoB,QAAnB,CAbrC,CAAA;;AAAA,UAAA,KAAA,EAAA;YAaCT,KAbD,GAAA,QAAA,CAAA,IAAA,CAAA;YAcCsD,UAdD,GAeHR,uBAAuB,CAACrC,QAAD,EAAW/B,MAAX,CAAvB,yBAA6CqB,eAAe,CAACC,KAAD,EAAQtB,MAAM,CAACC,IAAf,CAA5D,qDAA6C,gBAAqCY,CAAAA,EAAlF,CAfG,CAiBL;;AACMgE,YAAAA,0BAlBD,GAkB8BpD,MAAM,CAACqD,WAAP,EAlB9B,CAAA;YAmBLD,0BAA0B,CAACE,iBAA3B,CAA6C;AAACvB,cAAAA,GAAG,EAAE3C,EAAN;AAAUoD,cAAAA,KAAK,EAAExE,IAAAA;aAA9D,CAAA,CAAA;AACAoF,YAAAA,0BAA0B,CAACG,KAA3B,CAAiCnE,EAAjC,EAAqC;AACnCoE,cAAAA,GAAG,EACAR,aAAAA,CAAAA,mCAAAA,CAAAA,EAAAA,EAAAA,SADA,EACYG,UADZ,CAEGJ,EAAAA,aAAa,IAAIxE,MAAM,CAACI,iBAAP,KAA6BrB,iBAAiB,CAACmG,QAAhE,GAAAC,mCAAA,CAAA,EAAA,EAEGR,gBAFH,EAEsBb,qBAAqB,CACvCZ,cADuC,EAEvClD,MAAM,CAACI,iBAAP,KAA6BrB,iBAAiB,CAACqG,IAFR,CAF3C,IAOA,EATH,CAAA;aADL,CAAA,CAAA;AApBK,YAAA,QAAA,CAAA,IAAA,GAAA,EAAA,CAAA;YAAA,OAiCCP,0BAA0B,CAACQ,MAA3B,EAjCD,CAAA;;AAAA,UAAA,KAAA,EAAA;AAAA,YAAA,IAAA,CAoCDd,YApCC,EAAA;AAAA,cAAA,QAAA,CAAA,IAAA,GAAA,EAAA,CAAA;AAAA,cAAA,MAAA;AAAA,aAAA;;AAAA,YAAA,QAAA,CAAA,IAAA,GAAA,EAAA,CAAA;YAAA,OAqC+BtB,kBAAkB,CAACC,cAAD,CArCjD,CAAA;;AAAA,UAAA,KAAA,EAAA;YAqCGoC,mBArCH,GAAA,QAAA,CAAA,IAAA,CAAA;;AAAA,YAAA,IAAA,EAsCCA,mBAAmB,CAAC/D,MAApB,GAA6B,CAtC9B,CAAA,EAAA;AAAA,cAAA,QAAA,CAAA,IAAA,GAAA,EAAA,CAAA;AAAA,cAAA,MAAA;AAAA,aAAA;;AAuCKgE,YAAAA,uBAvCL,GAuC+B9D,MAAM,CAACqD,WAAP,EAvC/B,CAAA;AAwCGU,YAAAA,cAxCH,GAwCuC,EAxCvC,CAAA;;AAyCD,YAAA,IAAIxF,MAAM,CAACI,iBAAP,KAA6BrB,iBAAiB,CAACmG,QAAnD,EAA6D;cAC3DM,cAAc,GAAGC,qBAAC,CAACC,OAAF,CACfJ,mBAAmB,CAACvE,GAApB,CAAwB,UAACsD,GAAD,EAAS;AAC/B,gBAAA,IAAM7D,IAAI,GAAG4D,uBAAuB,CAACC,GAAD,EAAMrE,MAAN,CAApC,CAAA;AACA,gBAAA,IAAI,CAACQ,IAAL,EAAW,OAAO,IAAP,CAAA;AACX,gBAAA,OAAA,aAAA,CAAA;AACEmF,kBAAAA,IAAI,EAAEnF,IAAAA;AADR,iBAAA,EAEKsD,qBAAqB,CACtBO,GAAG,CAACb,GADkB,EAEtBxD,MAAM,CAACI,iBAAP,KAA6BrB,iBAAiB,CAACqG,IAFzB,CAF1B,CAAA,CAAA;eAHF,EAUG,EAVH,CADe,CAAjB,CAAA;AAaD,aAvDA;;;AAyDDG,YAAAA,uBAAuB,CAACP,KAAxB,CAA8B9B,cAA9B,EAA8C;cAC5C+B,GAAG,EAAAE,mCAAA,CAAA,EAAA,EACAT,aADA,EACgBc,cADhB,CAAA;aADL,CAAA,CAAA;AAzDC,YAAA,QAAA,CAAA,IAAA,GAAA,EAAA,CAAA;YAAA,OA8DKD,uBAAuB,CAACF,MAAxB,EA9DL,CAAA;;AAAA,UAAA,KAAA,EAAA,CAAA;AAAA,UAAA,KAAA,KAAA;AAAA,YAAA,OAAA,QAAA,CAAA,IAAA,EAAA,CAAA;AAAA,SAAA;AAAA,OAAA;AAAA,KAAA,EAAA,OAAA,CAAA,CAAA;;;;;ACdA,SAASO,aAAT,CAAuBlC,IAAvB,EAA2C;EAChD,OAAOA,IAAI,CAACmC,MAAL,CAAoB,UAACC,MAAD,EAASC,IAAT,EAAeC,CAAf,EAAqB;AAC9C,IAAA,IAAMC,OAAO,GAAG,OAAOF,IAAP,KAAgB,QAAhC,CAAA;AACA,IAAA,IAAMG,KAAK,GAAGC,mBAAa,CAACJ,IAAD,CAA3B,CAAA;IACA,IAAMK,SAAS,GAAGJ,CAAC,KAAK,CAAN,GAAU,EAAV,GAAe,GAAjC,CAAA;IACA,IAAMK,GAAG,GAAGJ,OAAO,IAAIC,KAAX,GAAmB,IAAnB,GAA6BE,EAAAA,CAAAA,MAAAA,CAAAA,SAA7B,CAAyCL,CAAAA,MAAAA,CAAAA,IAAzC,CAAZ,CAAA;IACA,OAAUD,EAAAA,CAAAA,MAAAA,CAAAA,MAAV,SAAmBO,GAAnB,CAAA,CAAA;GALK,EAMJ,EANI,CAAP,CAAA;AAOD;;;;;;;;;;;;;;;;;;;"}