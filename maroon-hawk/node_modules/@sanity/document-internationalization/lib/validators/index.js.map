{"version":3,"file":"index.js","sources":["../../src/constants/I18nPrefix.ts","../../src/constants/I18nDelimiter.ts","../../src/constants/ReferenceBehavior.ts","../../src/constants/IdStructure.ts","../../src/utils/getSanityClient.ts","../../src/utils/getBaseIdFromId.ts","../../src/utils/serializePath.ts","../../src/validators/isSlugUnique.ts"],"sourcesContent":["export const I18nPrefix = 'i18n'\n","export const I18nDelimiter = '__i18n_'\n","export enum ReferenceBehavior {\n  STRONG = 'strong',\n  WEAK = 'weak',\n  DISABLED = 'disabled',\n}\n","export enum IdStructure {\n  SUBPATH = 'subpath',\n  DELIMITER = 'delimiter',\n}\n","import client from 'part:@sanity/base/client'\nexport const getSanityClient = (): import('@sanity/client').SanityClient =>\n  client.withConfig({apiVersion: `2021-10-01`})\n","import {I18nPrefix, I18nDelimiter} from '../constants'\n\nexport const getBaseIdFromId = (id: string): string => {\n  const nonDraftId = id.replace(/^drafts\\./, '')\n\n  // subpath\n  const rx = new RegExp(`${I18nPrefix}\\\\.([^.]+)\\\\.[^.]+`)\n  const match = nonDraftId.match(rx)\n  if (match && match.length === 2) return match[1]\n\n  // delimiter\n  const split = nonDraftId.split(I18nDelimiter)\n  if (split.length > 0) return split[0]\n\n  return nonDraftId\n}\n","import {Path, isKeyedObject} from '@sanity/types'\n\nexport function serializePath(path: Path): string {\n  return path.reduce<string>((target, part, i) => {\n    const isIndex = typeof part === 'number'\n    const isKey = isKeyedObject(part)\n    const separator = i === 0 ? '' : '.'\n    const add = isIndex || isKey ? '[]' : `${separator}${part}`\n    return `${target}${add}`\n  }, '')\n}\n","import type {UniqueCheckerFn} from '@sanity/types'\nimport {I18nDelimiter} from '../constants'\nimport {getBaseIdFromId, getSanityClient, serializePath} from '../utils'\n\n/**\n * @README most of this is taken from the deafultUnique function in @sanity/validation\n */\nexport const isSlugUnique: UniqueCheckerFn = (slug, context) => {\n  const {document, path, type} = context\n  const schemaOptions = type?.options as {disableArrayWarning?: boolean} | undefined\n\n  if (!document) {\n    throw new Error(`\\`document\\` was not provided in validation context.`)\n  }\n  if (!path) {\n    throw new Error(`\\`path\\` was not provided in validation context.`)\n  }\n\n  const disableArrayWarning = schemaOptions?.disableArrayWarning || false\n  const baseId = getBaseIdFromId(document._id)\n  const docType = document._type\n  const atPath = serializePath(path.concat('current'))\n\n  if (!disableArrayWarning && atPath.includes('[]')) {\n    const serializedPath = serializePath(path)\n    console.warn(\n      [\n        `Slug field at path ${serializedPath} is within an array and cannot be automatically checked for uniqueness`,\n        `If you need to check for uniqueness, provide your own \"isUnique\" method`,\n        `To disable this message, set \\`disableArrayWarning: true\\` on the slug \\`options\\` field`,\n      ].join('\\n')\n    )\n  }\n\n  const constraints = [\n    '_type == $docType',\n    '!(_id in path(\"drafts.**\"))', // exclude drafts\n    '_id != $baseId', // exclude own base document\n    '!(_id in path(\"i18n.\" + $baseId + \".*\"))', // exclude any subpath translations\n    `!(_id match $baseId  + \"${I18nDelimiter}*\")`, // exclude any delimiter based translations\n    `${atPath} == $slug`,\n  ].join(' && ')\n\n  return getSanityClient().fetch<boolean>(\n    `!defined(*[${constraints}][0]._id)`,\n    {\n      docType,\n      baseId,\n      slug,\n    },\n    {tag: 'validation.slug-is-unique'}\n  )\n}\n"],"names":["I18nPrefix","I18nDelimiter","ReferenceBehavior","IdStructure","getSanityClient","client","withConfig","apiVersion","getBaseIdFromId","id","nonDraftId","replace","rx","RegExp","match","length","split","serializePath","path","reduce","target","part","i","isIndex","isKey","isKeyedObject","separator","add","isSlugUnique","slug","context","document","type","schemaOptions","options","Error","disableArrayWarning","baseId","_id","docType","_type","atPath","concat","includes","serializedPath","console","warn","join","constraints","fetch","tag"],"mappings":"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"}